package javax.swing.plaf

import java.awt.{AWTEvent, Component, Component.BaselineResizeBehavior, Dimension, Graphics}
import java.awt.event.{ComponentEvent, FocusEvent, HierarchyEvent, InputMethodEvent, KeyEvent, MouseEvent, MouseWheelEvent}
import java.beans.{PropertyChangeEvent, PropertyChangeListener}
import java.io.Serializable
import java.lang.{Object, String}
import javax.swing.{JComponent, JLayer}

// The base class for all JLayer's UI delegates.
// 
// paint(java.awt.Graphics, javax.swing.JComponent) method performs the
// painting of the JLayer
// and eventDispatched(AWTEvent, JLayer) method is notified
// about any AWTEvents which have been generated by a JLayer
// or any of its subcomponents.
// 
// The LayerUI differs from the UI delegates of the other components,
// because it is LookAndFeel independent and is not updated by default when
// the system LookAndFeel is changed.
// 
// The subclasses of LayerUI can either be stateless and shareable
// by multiple JLayers or not shareable.
class LayerUI[V <: Component] extends ComponentUI with Serializable {

    @stub
    // Adds a PropertyChangeListener to the listener list.
    def addPropertyChangeListener(listener: PropertyChangeListener): Unit = ???

    @stub
    // Adds a PropertyChangeListener to the listener list for a specific
    // property.
    def addPropertyChangeListener(propertyName: String, listener: PropertyChangeListener): Unit = ???

    @stub
    // Notifies the LayerUI when any of its property are changed
    // and enables updating every JLayer
    // this LayerUI instance is set to.
    def applyPropertyChange(evt: PropertyChangeEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Causes the passed instance of JLayer to lay out its components.
    def doLayout(l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes AWTEvents for JLayer
    // and all its descendants to this LayerUI instance.
    def eventDispatched(e: AWTEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Support for reporting bound property changes for Object properties.
    protected def firePropertyChange(propertyName: String, oldValue: Object, newValue: Object): Unit = ???

    @stub
    // If the JLayer's view component is not null,
    // this calls the view's getBaseline() method.
    def getBaseline(c: JComponent, width: Int, height: Int): Int = ???

    @stub
    // If the JLayer's view component is not null,
    // this returns the result of the view's getBaselineResizeBehavior() method.
    def getBaselineResizeBehavior(c: JComponent): Component.BaselineResizeBehavior = ???

    @stub
    // If the JLayer's view component is not null,
    // this returns the result of  the view's getMaximumSize() method.
    def getMaximumSize(c: JComponent): Dimension = ???

    @stub
    // If the JLayer's view component is not null,
    // this returns the result of  the view's getMinimalSize() method.
    def getMinimumSize(c: JComponent): Dimension = ???

    @stub
    // If the JLayer's view component is not null,
    // this returns the result of  the view's getPreferredSize() method.
    def getPreferredSize(c: JComponent): Dimension = ???

    @stub
    // Returns an array of all the property change listeners
    // registered on this component.
    def getPropertyChangeListeners(): Array[PropertyChangeListener] = ???

    @stub
    // Returns an array of all the listeners which have been associated
    // with the named property.
    def getPropertyChangeListeners(propertyName: String): Array[PropertyChangeListener] = ???

    @stub
    // Configures the JLayer this LayerUI is set to.
    def installUI(c: JComponent): Unit = ???

    @stub
    // Paints the specified component.
    def paint(g: Graphics, c: JComponent): Unit = ???

    @stub
    // Paints the specified region in the JLayer this LayerUI is set to, immediately.
    def paintImmediately(x: Int, y: Int, width: Int, height: Int, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes component events occurring on the JLayer
    // or any of its subcomponents.
    protected def processComponentEvent(e: ComponentEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes focus events occurring on the JLayer
    // or any of its subcomponents.
    protected def processFocusEvent(e: FocusEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes hierarchy bounds event occurring on the JLayer
    // or any of its subcomponents.
    protected def processHierarchyBoundsEvent(e: HierarchyEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes hierarchy event occurring on the JLayer
    // or any of its subcomponents.
    protected def processHierarchyEvent(e: HierarchyEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes input event occurring on the JLayer
    // or any of its subcomponents.
    protected def processInputMethodEvent(e: InputMethodEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes key events occurring on the JLayer
    // or any of its subcomponents.
    protected def processKeyEvent(e: KeyEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes mouse events occurring on the JLayer
    // or any of its subcomponents.
    protected def processMouseEvent(e: MouseEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes mouse motion event occurring on the JLayer
    // or any of its subcomponents.
    protected def processMouseMotionEvent(e: MouseEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Processes mouse wheel event occurring on the JLayer
    // or any of its subcomponents.
    protected def processMouseWheelEvent(e: MouseWheelEvent, l: JLayer[_ <: V]): Unit = ???

    @stub
    // Removes a PropertyChangeListener from the listener list.
    def removePropertyChangeListener(listener: PropertyChangeListener): Unit = ???

    @stub
    // Removes a PropertyChangeListener from the listener
    // list for a specific property.
    def removePropertyChangeListener(propertyName: String, listener: PropertyChangeListener): Unit = ???

    @stub
    // Reverses the configuration which was previously set
    // in the installUI(JComponent) method.
    def uninstallUI(c: JComponent): Unit = ???
}
