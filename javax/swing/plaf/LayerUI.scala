package javax.swing.plaf

import java.awt.{AWTEvent, Component, Component.BaselineResizeBehavior, Dimension, Graphics}
import java.awt.event.{ComponentEvent, FocusEvent, HierarchyEvent, InputMethodEvent, KeyEvent, MouseEvent, MouseWheelEvent}
import java.beans.{PropertyChangeEvent, PropertyChangeListener}
import java.io.Serializable
import java.lang.{Object, String}
import javax.swing.{JComponent, JLayer}
import scala.scalanative.annotation.stub

/** The base class for all JLayer's UI delegates.
 *  
 *  paint(java.awt.Graphics, javax.swing.JComponent) method performs the
 *  painting of the JLayer
 *  and eventDispatched(AWTEvent, JLayer) method is notified
 *  about any AWTEvents which have been generated by a JLayer
 *  or any of its subcomponents.
 *  
 *  The LayerUI differs from the UI delegates of the other components,
 *  because it is LookAndFeel independent and is not updated by default when
 *  the system LookAndFeel is changed.
 *  
 *  The subclasses of LayerUI can either be stateless and shareable
 *  by multiple JLayers or not shareable.
 */
class LayerUI[V <: Component] extends ComponentUI with Serializable {

    /**  */
    @stub
    def this() = ???

    /** Adds a PropertyChangeListener to the listener list. */
    @stub
    def addPropertyChangeListener(listener: PropertyChangeListener): Unit = ???

    /** Adds a PropertyChangeListener to the listener list for a specific
     *  property.
     */
    @stub
    def addPropertyChangeListener(propertyName: String, listener: PropertyChangeListener): Unit = ???

    /** Notifies the LayerUI when any of its property are changed
     *  and enables updating every JLayer
     *  this LayerUI instance is set to.
     */
    @stub
    def applyPropertyChange(evt: PropertyChangeEvent, l: JLayer[_ <: V]): Unit = ???

    /** Causes the passed instance of JLayer to lay out its components. */
    @stub
    def doLayout(l: JLayer[_ <: V]): Unit = ???

    /** Processes AWTEvents for JLayer
     *  and all its descendants to this LayerUI instance.
     */
    @stub
    def eventDispatched(e: AWTEvent, l: JLayer[_ <: V]): Unit = ???

    /** Support for reporting bound property changes for Object properties. */
    @stub
    protected def firePropertyChange(propertyName: String, oldValue: Object, newValue: Object): Unit = ???

    /** If the JLayer's view component is not null,
     *  this calls the view's getBaseline() method.
     */
    @stub
    def getBaseline(c: JComponent, width: Int, height: Int): Int = ???

    /** If the JLayer's view component is not null,
     *  this returns the result of the view's getBaselineResizeBehavior() method.
     */
    @stub
    def getBaselineResizeBehavior(c: JComponent): Component.BaselineResizeBehavior = ???

    /** If the JLayer's view component is not null,
     *  this returns the result of  the view's getMaximumSize() method.
     */
    @stub
    def getMaximumSize(c: JComponent): Dimension = ???

    /** If the JLayer's view component is not null,
     *  this returns the result of  the view's getMinimalSize() method.
     */
    @stub
    def getMinimumSize(c: JComponent): Dimension = ???

    /** If the JLayer's view component is not null,
     *  this returns the result of  the view's getPreferredSize() method.
     */
    @stub
    def getPreferredSize(c: JComponent): Dimension = ???

    /** Returns an array of all the property change listeners
     *  registered on this component.
     */
    @stub
    def getPropertyChangeListeners(): Array[PropertyChangeListener] = ???

    /** Returns an array of all the listeners which have been associated
     *  with the named property.
     */
    @stub
    def getPropertyChangeListeners(propertyName: String): Array[PropertyChangeListener] = ???

    /** Configures the JLayer this LayerUI is set to. */
    @stub
    def installUI(c: JComponent): Unit = ???

    /** Paints the specified component. */
    @stub
    def paint(g: Graphics, c: JComponent): Unit = ???

    /** Paints the specified region in the JLayer this LayerUI is set to, immediately. */
    @stub
    def paintImmediately(x: Int, y: Int, width: Int, height: Int, l: JLayer[_ <: V]): Unit = ???

    /** Processes component events occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processComponentEvent(e: ComponentEvent, l: JLayer[_ <: V]): Unit = ???

    /** Processes focus events occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processFocusEvent(e: FocusEvent, l: JLayer[_ <: V]): Unit = ???

    /** Processes hierarchy bounds event occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processHierarchyBoundsEvent(e: HierarchyEvent, l: JLayer[_ <: V]): Unit = ???

    /** Processes hierarchy event occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processHierarchyEvent(e: HierarchyEvent, l: JLayer[_ <: V]): Unit = ???

    /** Processes input event occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processInputMethodEvent(e: InputMethodEvent, l: JLayer[_ <: V]): Unit = ???

    /** Processes key events occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processKeyEvent(e: KeyEvent, l: JLayer[_ <: V]): Unit = ???

    /** Processes mouse events occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processMouseEvent(e: MouseEvent, l: JLayer[_ <: V]): Unit = ???

    /** Processes mouse motion event occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processMouseMotionEvent(e: MouseEvent, l: JLayer[_ <: V]): Unit = ???

    /** Processes mouse wheel event occurring on the JLayer
     *  or any of its subcomponents.
     */
    @stub
    protected def processMouseWheelEvent(e: MouseWheelEvent, l: JLayer[_ <: V]): Unit = ???

    /** Removes a PropertyChangeListener from the listener list. */
    @stub
    def removePropertyChangeListener(listener: PropertyChangeListener): Unit = ???

    /** Removes a PropertyChangeListener from the listener
     *  list for a specific property.
     */
    @stub
    def removePropertyChangeListener(propertyName: String, listener: PropertyChangeListener): Unit = ???

    /** Reverses the configuration which was previously set
     *  in the installUI(JComponent) method.
     */
    @stub
    def uninstallUI(c: JComponent): Unit = ???

    /** Invoked when JLayer.updateUI() is called
     *  by the JLayer this LayerUI is set to.
     */
    @stub
    def updateUI(l: JLayer[_ <: V]): Unit = ???
}
