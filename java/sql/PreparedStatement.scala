package java.sql

import java.io.{InputStream, Reader}
import java.lang.{Object, String}
import java.math.BigDecimal
import java.net.URL
import java.util.Calendar
import scala.scalanative.annotation.stub

/** An object that represents a precompiled SQL statement.
 *  A SQL statement is precompiled and stored in a
 *  PreparedStatement object. This object can then be used to
 *  efficiently execute this statement multiple times.
 * 
 *  Note: The setter methods (setShort, setString,
 *  and so on) for setting IN parameter values
 *  must specify types that are compatible with the defined SQL type of
 *  the input parameter. For instance, if the IN parameter has SQL type
 *  INTEGER, then the method setInt should be used.
 * 
 *  If arbitrary parameter type conversions are required, the method
 *  setObject should be used with a target SQL type.
 *  
 *  In the following example of setting a parameter, con represents
 *  an active connection:
 *  
 *    PreparedStatement pstmt = con.prepareStatement("UPDATE EMPLOYEES
 *                                      SET SALARY = ? WHERE ID = ?");
 *    pstmt.setBigDecimal(1, 153833.00)
 *    pstmt.setInt(2, 110592)
 *  
 */
trait PreparedStatement extends Statement {

    /** Adds a set of parameters to this PreparedStatement
     *  object's batch of commands.
     */
    @stub
    def addBatch(): Unit = ???

    /** Clears the current parameter values immediately. */
    @stub
    def clearParameters(): Unit = ???

    /** Executes the SQL statement in this PreparedStatement object,
     *  which may be any kind of SQL statement.
     */
    @stub
    def execute(): Boolean = ???

    /** Executes the SQL statement in this PreparedStatement object,
     *  which must be an SQL Data Manipulation Language (DML) statement,
     *  such as INSERT, UPDATE or
     *  DELETE; or an SQL statement that returns nothing,
     *  such as a DDL statement.
     */
    @stub
    val Long: default = ???

    /** Executes the SQL query in this PreparedStatement object
     *  and returns the ResultSet object generated by the query.
     */
    @stub
    def executeQuery(): ResultSet = ???

    /** Executes the SQL statement in this PreparedStatement object,
     *  which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or
     *  DELETE; or an SQL statement that returns nothing,
     *  such as a DDL statement.
     */
    @stub
    def executeUpdate(): Int = ???

    /** Retrieves a ResultSetMetaData object that contains
     *  information about the columns of the ResultSet object
     *  that will be returned when this PreparedStatement object
     *  is executed.
     */
    @stub
    def getMetaData(): ResultSetMetaData = ???

    /** Retrieves the number, types and properties of this
     *  PreparedStatement object's parameters.
     */
    @stub
    def getParameterMetaData(): ParameterMetaData = ???

    /** Sets the designated parameter to the given java.sql.Array object. */
    @stub
    def setArray(parameterIndex: Int, x: Array): Unit = ???

    /** Sets the designated parameter to the given input stream. */
    @stub
    def setAsciiStream(parameterIndex: Int, x: InputStream): Unit = ???

    /** Sets the designated parameter to the given input stream, which will have
     *  the specified number of bytes.
     */
    @stub
    def setAsciiStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

    /** Sets the designated parameter to the given input stream, which will have
     *  the specified number of bytes.
     */
    @stub
    def setAsciiStream(parameterIndex: Int, x: InputStream, length: Long): Unit = ???

    /** Sets the designated parameter to the given java.math.BigDecimal value. */
    @stub
    def setBigDecimal(parameterIndex: Int, x: BigDecimal): Unit = ???

    /** Sets the designated parameter to the given input stream. */
    @stub
    def setBinaryStream(parameterIndex: Int, x: InputStream): Unit = ???

    /** Sets the designated parameter to the given input stream, which will have
     *  the specified number of bytes.
     */
    @stub
    def setBinaryStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

    /** Sets the designated parameter to the given input stream, which will have
     *  the specified number of bytes.
     */
    @stub
    def setBinaryStream(parameterIndex: Int, x: InputStream, length: Long): Unit = ???

    /** Sets the designated parameter to the given java.sql.Blob object. */
    @stub
    def setBlob(parameterIndex: Int, x: Blob): Unit = ???

    /** Sets the designated parameter to a InputStream object. */
    @stub
    def setBlob(parameterIndex: Int, inputStream: InputStream): Unit = ???

    /** Sets the designated parameter to a InputStream object. */
    @stub
    def setBlob(parameterIndex: Int, inputStream: InputStream, length: Long): Unit = ???

    /** Sets the designated parameter to the given Java boolean value. */
    @stub
    def setBoolean(parameterIndex: Int, x: Boolean): Unit = ???

    /** Sets the designated parameter to the given Java byte value. */
    @stub
    def setByte(parameterIndex: Int, x: Byte): Unit = ???

    /** Sets the designated parameter to the given Java array of bytes. */
    @stub
    def setBytes(parameterIndex: Int, x: Array[Byte]): Unit = ???

    /** Sets the designated parameter to the given Reader
     *  object.
     */
    @stub
    def setCharacterStream(parameterIndex: Int, reader: Reader): Unit = ???

    /** Sets the designated parameter to the given Reader
     *  object, which is the given number of characters long.
     */
    @stub
    def setCharacterStream(parameterIndex: Int, reader: Reader, length: Int): Unit = ???

    /** Sets the designated parameter to the given Reader
     *  object, which is the given number of characters long.
     */
    @stub
    def setCharacterStream(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

    /** Sets the designated parameter to the given java.sql.Clob object. */
    @stub
    def setClob(parameterIndex: Int, x: Clob): Unit = ???

    /** Sets the designated parameter to a Reader object. */
    @stub
    def setClob(parameterIndex: Int, reader: Reader): Unit = ???

    /** Sets the designated parameter to a Reader object. */
    @stub
    def setClob(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

    /** Sets the designated parameter to the given java.sql.Date value
     *  using the default time zone of the virtual machine that is running
     *  the application.
     */
    @stub
    def setDate(parameterIndex: Int, x: Date): Unit = ???

    /** Sets the designated parameter to the given java.sql.Date value,
     *  using the given Calendar object.
     */
    @stub
    def setDate(parameterIndex: Int, x: Date, cal: Calendar): Unit = ???

    /** Sets the designated parameter to the given Java double value. */
    @stub
    def setDouble(parameterIndex: Int, x: Double): Unit = ???

    /** Sets the designated parameter to the given Java float value. */
    @stub
    def setFloat(parameterIndex: Int, x: Float): Unit = ???

    /** Sets the designated parameter to the given Java int value. */
    @stub
    def setInt(parameterIndex: Int, x: Int): Unit = ???

    /** Sets the designated parameter to the given Java long value. */
    @stub
    def setLong(parameterIndex: Int, x: Long): Unit = ???

    /** Sets the designated parameter to a Reader object. */
    @stub
    def setNCharacterStream(parameterIndex: Int, value: Reader): Unit = ???

    /** Sets the designated parameter to a Reader object. */
    @stub
    def setNCharacterStream(parameterIndex: Int, value: Reader, length: Long): Unit = ???

    /** Sets the designated parameter to a java.sql.NClob object. */
    @stub
    def setNClob(parameterIndex: Int, value: NClob): Unit = ???

    /** Sets the designated parameter to a Reader object. */
    @stub
    def setNClob(parameterIndex: Int, reader: Reader): Unit = ???

    /** Sets the designated parameter to a Reader object. */
    @stub
    def setNClob(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

    /** Sets the designated parameter to the given String object. */
    @stub
    def setNString(parameterIndex: Int, value: String): Unit = ???

    /** Sets the designated parameter to SQL NULL. */
    @stub
    def setNull(parameterIndex: Int, sqlType: Int): Unit = ???

    /** Sets the designated parameter to SQL NULL. */
    @stub
    def setNull(parameterIndex: Int, sqlType: Int, typeName: String): Unit = ???

    /** Sets the value of the designated parameter using the given object. */
    @stub
    def setObject(parameterIndex: Int, x: Object): Unit = ???

    /** Sets the value of the designated parameter with the given object. */
    @stub
    def setObject(parameterIndex: Int, x: Object, targetSqlType: Int): Unit = ???

    /** Sets the value of the designated parameter with the given object. */
    @stub
    def setObject(parameterIndex: Int, x: Object, targetSqlType: Int, scaleOrLength: Int): Unit = ???

    /** Sets the value of the designated parameter with the given object. */
    @stub
    val Unit: default = ???

    /** Sets the value of the designated parameter with the given object. */
    @stub
    val Unit: default = ???

    /** Sets the designated parameter to the given
     *   REF(<structured-type>) value.
     */
    @stub
    def setRef(parameterIndex: Int, x: Ref): Unit = ???

    /** Sets the designated parameter to the given java.sql.RowId object. */
    @stub
    def setRowId(parameterIndex: Int, x: RowId): Unit = ???

    /** Sets the designated parameter to the given Java short value. */
    @stub
    def setShort(parameterIndex: Int, x: Short): Unit = ???

    /** Sets the designated parameter to the given java.sql.SQLXML object. */
    @stub
    def setSQLXML(parameterIndex: Int, xmlObject: SQLXML): Unit = ???

    /** Sets the designated parameter to the given Java String value. */
    @stub
    def setString(parameterIndex: Int, x: String): Unit = ???

    /** Sets the designated parameter to the given java.sql.Time value. */
    @stub
    def setTime(parameterIndex: Int, x: Time): Unit = ???

    /** Sets the designated parameter to the given java.sql.Time value,
     *  using the given Calendar object.
     */
    @stub
    def setTime(parameterIndex: Int, x: Time, cal: Calendar): Unit = ???

    /** Sets the designated parameter to the given java.sql.Timestamp value. */
    @stub
    def setTimestamp(parameterIndex: Int, x: Timestamp): Unit = ???

    /** Sets the designated parameter to the given java.sql.Timestamp value,
     *  using the given Calendar object.
     */
    @stub
    def setTimestamp(parameterIndex: Int, x: Timestamp, cal: Calendar): Unit = ???

    /** Deprecated. 
     * Use setCharacterStream
     * 
     */
    @stub
    def setUnicodeStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

    /** Sets the designated parameter to the given java.net.URL value. */
    @stub
    def setURL(parameterIndex: Int, x: URL): Unit = ???
}
