package java.sql

import java.io.{InputStream, Reader}
import java.lang.{Object, String}
import java.math.BigDecimal
import java.util.Calendar

// An object that represents a precompiled SQL statement.
// A SQL statement is precompiled and stored in a
// PreparedStatement object. This object can then be used to
// efficiently execute this statement multiple times.
//
// Note: The setter methods (setShort, setString,
// and so on) for setting IN parameter values
// must specify types that are compatible with the defined SQL type of
// the input parameter. For instance, if the IN parameter has SQL type
// INTEGER, then the method setInt should be used.
//
// If arbitrary parameter type conversions are required, the method
// setObject should be used with a target SQL type.
// 
// In the following example of setting a parameter, con represents
// an active connection:
// 
//   PreparedStatement pstmt = con.prepareStatement("UPDATE EMPLOYEES
//                                     SET SALARY = ? WHERE ID = ?");
//   pstmt.setBigDecimal(1, 153833.00)
//   pstmt.setInt(2, 110592)
// 
trait PreparedStatement extends Statement {

    @stub
    // Adds a set of parameters to this PreparedStatement
    // object's batch of commands.
    def addBatch(): Unit = ???

    @stub
    // Clears the current parameter values immediately.
    def clearParameters(): Unit = ???

    @stub
    // Executes the SQL statement in this PreparedStatement object,
    // which may be any kind of SQL statement.
    def execute(): Boolean = ???

    @stub
    // Executes the SQL statement in this PreparedStatement object,
    // which must be an SQL Data Manipulation Language (DML) statement,
    // such as INSERT, UPDATE or
    // DELETE; or an SQL statement that returns nothing,
    // such as a DDL statement.
    def Long: default = ???

    @stub
    // Executes the SQL query in this PreparedStatement object
    // and returns the ResultSet object generated by the query.
    def executeQuery(): ResultSet = ???

    @stub
    // Executes the SQL statement in this PreparedStatement object,
    // which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or
    // DELETE; or an SQL statement that returns nothing,
    // such as a DDL statement.
    def executeUpdate(): Int = ???

    @stub
    // Retrieves a ResultSetMetaData object that contains
    // information about the columns of the ResultSet object
    // that will be returned when this PreparedStatement object
    // is executed.
    def getMetaData(): ResultSetMetaData = ???

    @stub
    // Retrieves the number, types and properties of this
    // PreparedStatement object's parameters.
    def getParameterMetaData(): ParameterMetaData = ???

    @stub
    // Sets the designated parameter to the given java.sql.Array object.
    def setArray(parameterIndex: Int, x: Array): Unit = ???

    @stub
    // Sets the designated parameter to the given input stream.
    def setAsciiStream(parameterIndex: Int, x: InputStream): Unit = ???

    @stub
    // Sets the designated parameter to the given input stream, which will have
    // the specified number of bytes.
    def setAsciiStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

    @stub
    // Sets the designated parameter to the given input stream, which will have
    // the specified number of bytes.
    def setAsciiStream(parameterIndex: Int, x: InputStream, length: Long): Unit = ???

    @stub
    // Sets the designated parameter to the given java.math.BigDecimal value.
    def setBigDecimal(parameterIndex: Int, x: BigDecimal): Unit = ???

    @stub
    // Sets the designated parameter to the given input stream.
    def setBinaryStream(parameterIndex: Int, x: InputStream): Unit = ???

    @stub
    // Sets the designated parameter to the given input stream, which will have
    // the specified number of bytes.
    def setBinaryStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???

    @stub
    // Sets the designated parameter to the given input stream, which will have
    // the specified number of bytes.
    def setBinaryStream(parameterIndex: Int, x: InputStream, length: Long): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.Blob object.
    def setBlob(parameterIndex: Int, x: Blob): Unit = ???

    @stub
    // Sets the designated parameter to a InputStream object.
    def setBlob(parameterIndex: Int, inputStream: InputStream): Unit = ???

    @stub
    // Sets the designated parameter to a InputStream object.
    def setBlob(parameterIndex: Int, inputStream: InputStream, length: Long): Unit = ???

    @stub
    // Sets the designated parameter to the given Java boolean value.
    def setBoolean(parameterIndex: Int, x: Boolean): Unit = ???

    @stub
    // Sets the designated parameter to the given Java byte value.
    def setByte(parameterIndex: Int, x: Byte): Unit = ???

    @stub
    // Sets the designated parameter to the given Java array of bytes.
    def setBytes(parameterIndex: Int, x: Array[Byte]): Unit = ???

    @stub
    // Sets the designated parameter to the given Reader
    // object.
    def setCharacterStream(parameterIndex: Int, reader: Reader): Unit = ???

    @stub
    // Sets the designated parameter to the given Reader
    // object, which is the given number of characters long.
    def setCharacterStream(parameterIndex: Int, reader: Reader, length: Int): Unit = ???

    @stub
    // Sets the designated parameter to the given Reader
    // object, which is the given number of characters long.
    def setCharacterStream(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.Clob object.
    def setClob(parameterIndex: Int, x: Clob): Unit = ???

    @stub
    // Sets the designated parameter to a Reader object.
    def setClob(parameterIndex: Int, reader: Reader): Unit = ???

    @stub
    // Sets the designated parameter to a Reader object.
    def setClob(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.Date value
    // using the default time zone of the virtual machine that is running
    // the application.
    def setDate(parameterIndex: Int, x: Date): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.Date value,
    // using the given Calendar object.
    def setDate(parameterIndex: Int, x: Date, cal: Calendar): Unit = ???

    @stub
    // Sets the designated parameter to the given Java double value.
    def setDouble(parameterIndex: Int, x: double): Unit = ???

    @stub
    // Sets the designated parameter to the given Java float value.
    def setFloat(parameterIndex: Int, x: float): Unit = ???

    @stub
    // Sets the designated parameter to the given Java int value.
    def setInt(parameterIndex: Int, x: Int): Unit = ???

    @stub
    // Sets the designated parameter to the given Java long value.
    def setLong(parameterIndex: Int, x: Long): Unit = ???

    @stub
    // Sets the designated parameter to a Reader object.
    def setNCharacterStream(parameterIndex: Int, value: Reader): Unit = ???

    @stub
    // Sets the designated parameter to a Reader object.
    def setNCharacterStream(parameterIndex: Int, value: Reader, length: Long): Unit = ???

    @stub
    // Sets the designated parameter to a java.sql.NClob object.
    def setNClob(parameterIndex: Int, value: NClob): Unit = ???

    @stub
    // Sets the designated parameter to a Reader object.
    def setNClob(parameterIndex: Int, reader: Reader): Unit = ???

    @stub
    // Sets the designated parameter to a Reader object.
    def setNClob(parameterIndex: Int, reader: Reader, length: Long): Unit = ???

    @stub
    // Sets the designated parameter to the given String object.
    def setNString(parameterIndex: Int, value: String): Unit = ???

    @stub
    // Sets the designated parameter to SQL NULL.
    def setNull(parameterIndex: Int, sqlType: Int): Unit = ???

    @stub
    // Sets the designated parameter to SQL NULL.
    def setNull(parameterIndex: Int, sqlType: Int, typeName: String): Unit = ???

    @stub
    // Sets the value of the designated parameter using the given object.
    def setObject(parameterIndex: Int, x: Object): Unit = ???

    @stub
    // Sets the value of the designated parameter with the given object.
    def setObject(parameterIndex: Int, x: Object, targetSqlType: Int): Unit = ???

    @stub
    // Sets the value of the designated parameter with the given object.
    def setObject(parameterIndex: Int, x: Object, targetSqlType: Int, scaleOrLength: Int): Unit = ???

    @stub
    // Sets the value of the designated parameter with the given object.
    def Unit: default = ???

    @stub
    // Sets the value of the designated parameter with the given object.
    def Unit: default = ???

    @stub
    // Sets the designated parameter to the given
    //  REF(<structured-type>) value.
    def setRef(parameterIndex: Int, x: Ref): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.RowId object.
    def setRowId(parameterIndex: Int, x: RowId): Unit = ???

    @stub
    // Sets the designated parameter to the given Java short value.
    def setShort(parameterIndex: Int, x: Short): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.SQLXML object.
    def setSQLXML(parameterIndex: Int, xmlObject: SQLXML): Unit = ???

    @stub
    // Sets the designated parameter to the given Java String value.
    def setString(parameterIndex: Int, x: String): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.Time value.
    def setTime(parameterIndex: Int, x: Time): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.Time value,
    // using the given Calendar object.
    def setTime(parameterIndex: Int, x: Time, cal: Calendar): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.Timestamp value.
    def setTimestamp(parameterIndex: Int, x: Timestamp): Unit = ???

    @stub
    // Sets the designated parameter to the given java.sql.Timestamp value,
    // using the given Calendar object.
    def setTimestamp(parameterIndex: Int, x: Timestamp, cal: Calendar): Unit = ???

    @stub
    // Deprecated. 
    //Use setCharacterStream
    //
    def setUnicodeStream(parameterIndex: Int, x: InputStream, length: Int): Unit = ???
}
