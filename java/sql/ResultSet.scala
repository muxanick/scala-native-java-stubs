package java.sql

import java.io.{InputStream, Reader}
import java.lang.{AutoCloseable, Class, Object, String}
import java.math.BigDecimal
import java.net.URL
import java.util.{Calendar, Map}
import scala.scalanative.annotation.stub

/** A table of data representing a database result set, which
 *  is usually generated by executing a statement that queries the database.
 * 
 *  A ResultSet object  maintains a cursor pointing
 *  to its current row of data.  Initially the cursor is positioned
 *  before the first row. The next method moves the
 *  cursor to the next row, and because it returns false
 *  when there are no more rows in the ResultSet object,
 *  it can be used in a while loop to iterate through
 *  the result set.
 *  
 *  A default ResultSet object is not updatable and
 *  has a cursor that moves forward only.  Thus, you can
 *  iterate through it only once and only from the first row to the
 *  last row. It is possible to
 *  produce ResultSet objects that are scrollable and/or
 *  updatable.  The following code fragment, in which con
 *  is a valid Connection object, illustrates how to make
 *  a result set that is scrollable and insensitive to updates by others, and
 *  that is updatable. See ResultSet fields for other
 *  options.
 *  
 * 
 *        Statement stmt = con.createStatement(
 *                                       ResultSet.TYPE_SCROLL_INSENSITIVE,
 *                                       ResultSet.CONCUR_UPDATABLE);
 *        ResultSet rs = stmt.executeQuery("SELECT a, b FROM TABLE2");
 *        // rs will be scrollable, will not show changes made by others,
 *        // and will be updatable
 * 
 *  
 *  The ResultSet interface provides
 *  getter methods (getBoolean, getLong, and so on)
 *  for retrieving column values from the current row.
 *  Values can be retrieved using either the index number of the
 *  column or the name of the column.  In general, using the
 *  column index will be more efficient.  Columns are numbered from 1.
 *  For maximum portability, result set columns within each row should be
 *  read in left-to-right order, and each column should be read only once.
 * 
 *  For the getter methods, a JDBC driver attempts
 *  to convert the underlying data to the Java type specified in the
 *  getter method and returns a suitable Java value.  The JDBC specification
 *  has a table showing the allowable mappings from SQL types to Java types
 *  that can be used by the ResultSet getter methods.
 * 
 *  Column names used as input to getter methods are case
 *  insensitive.  When a getter method is called  with
 *  a column name and several columns have the same name,
 *  the value of the first matching column will be returned.
 *  The column name option is
 *  designed to be used when column names are used in the SQL
 *  query that generated the result set.
 *  For columns that are NOT explicitly named in the query, it
 *  is best to use column numbers. If column names are used, the
 *  programmer should take care to guarantee that they uniquely refer to
 *  the intended columns, which can be assured with the SQL AS clause.
 *  
 *  A set of updater methods were added to this interface
 *  in the JDBC 2.0 API (Java™ 2 SDK,
 *  Standard Edition, version 1.2). The comments regarding parameters
 *  to the getter methods also apply to parameters to the
 *  updater methods.
 * 
 *  The updater methods may be used in two ways:
 *  
 *  to update a column value in the current row.  In a scrollable
 *      ResultSet object, the cursor can be moved backwards
 *      and forwards, to an absolute position, or to a position
 *      relative to the current row.
 *      The following code fragment updates the NAME column
 *      in the fifth row of the ResultSet object
 *      rs and then uses the method updateRow
 *      to update the data source table from which rs was derived.
 *  
 * 
 *        rs.absolute(5); // moves the cursor to the fifth row of rs
 *        rs.updateString("NAME", "AINSWORTH"); // updates the
 *           // NAME column of row 5 to be AINSWORTH
 *        rs.updateRow(); // updates the row in the data source
 * 
 *  
 *  to insert column values into the insert row.  An updatable
 *      ResultSet object has a special row associated with
 *      it that serves as a staging area for building a row to be inserted.
 *      The following code fragment moves the cursor to the insert row, builds
 *      a three-column row, and inserts it into rs and into
 *      the data source table using the method insertRow.
 *  
 * 
 *        rs.moveToInsertRow(); // moves cursor to the insert row
 *        rs.updateString(1, "AINSWORTH"); // updates the
 *           // first column of the insert row to be AINSWORTH
 *        rs.updateInt(2,35); // updates the second column to be 35
 *        rs.updateBoolean(3, true); // updates the third column to true
 *        rs.insertRow();
 *        rs.moveToCurrentRow();
 * 
 *  
 *  
 *  A ResultSet object is automatically closed when the
 *  Statement object that
 *  generated it is closed, re-executed, or used
 *  to retrieve the next result from a sequence of multiple results.
 * 
 *  The number, types and properties of a ResultSet
 *  object's columns are provided by the ResultSetMetaData
 *  object returned by the ResultSet.getMetaData method.
 */
trait ResultSet extends Wrapper with AutoCloseable {

    /** Moves the cursor to the given row number in
     *  this ResultSet object.
     */
    @stub
    def absolute(row: Int): Boolean = ???

    /** Moves the cursor to the end of
     *  this ResultSet object, just after the
     *  last row.
     */
    @stub
    def afterLast(): Unit = ???

    /** Moves the cursor to the front of
     *  this ResultSet object, just before the
     *  first row.
     */
    @stub
    def beforeFirst(): Unit = ???

    /** Cancels the updates made to the current row in this
     *  ResultSet object.
     */
    @stub
    def cancelRowUpdates(): Unit = ???

    /** Clears all warnings reported on this ResultSet object. */
    @stub
    def clearWarnings(): Unit = ???

    /** Releases this ResultSet object's database and
     *  JDBC resources immediately instead of waiting for
     *  this to happen when it is automatically closed.
     */
    @stub
    def close(): Unit = ???

    /** Deletes the current row from this ResultSet object
     *  and from the underlying database.
     */
    @stub
    def deleteRow(): Unit = ???

    /** Maps the given ResultSet column label to its
     *  ResultSet column index.
     */
    @stub
    def findColumn(columnLabel: String): Int = ???

    /** Moves the cursor to the first row in
     *  this ResultSet object.
     */
    @stub
    def first(): Boolean = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as an Array object
     *  in the Java programming language.
     */
    @stub
    def getArray(columnIndex: Int): Array = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as an Array object
     *  in the Java programming language.
     */
    @stub
    def getArray(columnLabel: String): Array = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a stream of ASCII characters.
     */
    @stub
    def getAsciiStream(columnIndex: Int): InputStream = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a stream of
     *  ASCII characters.
     */
    @stub
    def getAsciiStream(columnLabel: String): InputStream = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a
     *  java.math.BigDecimal with full precision.
     */
    @stub
    def getBigDecimal(columnIndex: Int): BigDecimal = ???

    /** Deprecated. 
     * Use getBigDecimal(int columnIndex)
     *              or getBigDecimal(String columnLabel)
     * 
     */
    @stub
    def getBigDecimal(columnIndex: Int, scale: Int): BigDecimal = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a
     *  java.math.BigDecimal with full precision.
     */
    @stub
    def getBigDecimal(columnLabel: String): BigDecimal = ???

    /** Deprecated. 
     * Use getBigDecimal(int columnIndex)
     *              or getBigDecimal(String columnLabel)
     * 
     */
    @stub
    def getBigDecimal(columnLabel: String, scale: Int): BigDecimal = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a  stream of
     *  uninterpreted bytes.
     */
    @stub
    def getBinaryStream(columnIndex: Int): InputStream = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a stream of uninterpreted
     *  bytes.
     */
    @stub
    def getBinaryStream(columnLabel: String): InputStream = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a Blob object
     *  in the Java programming language.
     */
    @stub
    def getBlob(columnIndex: Int): Blob = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a Blob object
     *  in the Java programming language.
     */
    @stub
    def getBlob(columnLabel: String): Blob = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a boolean in the Java programming language.
     */
    @stub
    def getBoolean(columnIndex: Int): Boolean = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a boolean in the Java programming language.
     */
    @stub
    def getBoolean(columnLabel: String): Boolean = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a byte in the Java programming language.
     */
    @stub
    def getByte(columnIndex: Int): Byte = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a byte in the Java programming language.
     */
    @stub
    def getByte(columnLabel: String): Byte = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a byte array in the Java programming language.
     */
    @stub
    def getBytes(columnIndex: Int): Array[Byte] = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a byte array in the Java programming language.
     */
    @stub
    def getBytes(columnLabel: String): Array[Byte] = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a
     *  java.io.Reader object.
     */
    @stub
    def getCharacterStream(columnIndex: Int): Reader = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a
     *  java.io.Reader object.
     */
    @stub
    def getCharacterStream(columnLabel: String): Reader = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a Clob object
     *  in the Java programming language.
     */
    @stub
    def getClob(columnIndex: Int): Clob = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a Clob object
     *  in the Java programming language.
     */
    @stub
    def getClob(columnLabel: String): Clob = ???

    /** Retrieves the concurrency mode of this ResultSet object. */
    @stub
    def getConcurrency(): Int = ???

    /** Retrieves the name of the SQL cursor used by this ResultSet
     *  object.
     */
    @stub
    def getCursorName(): String = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a java.sql.Date object in the Java programming language.
     */
    @stub
    def getDate(columnIndex: Int): Date = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a java.sql.Date object
     *  in the Java programming language.
     */
    @stub
    def getDate(columnIndex: Int, cal: Calendar): Date = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a java.sql.Date object in the Java programming language.
     */
    @stub
    def getDate(columnLabel: String): Date = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a java.sql.Date object
     *  in the Java programming language.
     */
    @stub
    def getDate(columnLabel: String, cal: Calendar): Date = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a double in the Java programming language.
     */
    @stub
    def getDouble(columnIndex: Int): Double = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a double in the Java programming language.
     */
    @stub
    def getDouble(columnLabel: String): Double = ???

    /** Retrieves the fetch direction for this
     *  ResultSet object.
     */
    @stub
    def getFetchDirection(): Int = ???

    /** Retrieves the fetch size for this
     *  ResultSet object.
     */
    @stub
    def getFetchSize(): Int = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a float in the Java programming language.
     */
    @stub
    def getFloat(columnIndex: Int): Float = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a float in the Java programming language.
     */
    @stub
    def getFloat(columnLabel: String): Float = ???

    /** Retrieves the holdability of this ResultSet object */
    @stub
    def getHoldability(): Int = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  an int in the Java programming language.
     */
    @stub
    def getInt(columnIndex: Int): Int = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  an int in the Java programming language.
     */
    @stub
    def getInt(columnLabel: String): Int = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a long in the Java programming language.
     */
    @stub
    def getLong(columnIndex: Int): Long = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a long in the Java programming language.
     */
    @stub
    def getLong(columnLabel: String): Long = ???

    /** Retrieves the  number, types and properties of
     *  this ResultSet object's columns.
     */
    @stub
    def getMetaData(): ResultSetMetaData = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a
     *  java.io.Reader object.
     */
    @stub
    def getNCharacterStream(columnIndex: Int): Reader = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a
     *  java.io.Reader object.
     */
    @stub
    def getNCharacterStream(columnLabel: String): Reader = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a NClob object
     *  in the Java programming language.
     */
    @stub
    def getNClob(columnIndex: Int): NClob = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a NClob object
     *  in the Java programming language.
     */
    @stub
    def getNClob(columnLabel: String): NClob = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a String in the Java programming language.
     */
    @stub
    def getNString(columnIndex: Int): String = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a String in the Java programming language.
     */
    @stub
    def getNString(columnLabel: String): String = ???

    /** Gets the value of the designated column in the current row
     *  of this ResultSet object as
     *  an Object in the Java programming language.
     */
    @stub
    def getObject(columnIndex: Int): Object = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object and will convert from the
     *  SQL type of the column to the requested Java data type, if the
     *  conversion is supported.
     */
    @stub
    def getObject[T](columnIndex: Int, type: Class[T]): T = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as an Object
     *  in the Java programming language.
     */
    @stub
    def getObject(columnIndex: Int, map: Map[String, Class[_]]): Object = ???

    /** Gets the value of the designated column in the current row
     *  of this ResultSet object as
     *  an Object in the Java programming language.
     */
    @stub
    def getObject(columnLabel: String): Object = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object and will convert from the
     *  SQL type of the column to the requested Java data type, if the
     *  conversion is supported.
     */
    @stub
    def getObject[T](columnLabel: String, type: Class[T]): T = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as an Object
     *  in the Java programming language.
     */
    @stub
    def getObject(columnLabel: String, map: Map[String, Class[_]]): Object = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a Ref object
     *  in the Java programming language.
     */
    @stub
    def getRef(columnIndex: Int): Ref = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a Ref object
     *  in the Java programming language.
     */
    @stub
    def getRef(columnLabel: String): Ref = ???

    /** Retrieves the current row number. */
    @stub
    def getRow(): Int = ???

    /** Retrieves the value of the designated column in the current row of this
     *  ResultSet object as a java.sql.RowId object in the Java
     *  programming language.
     */
    @stub
    def getRowId(columnIndex: Int): RowId = ???

    /** Retrieves the value of the designated column in the current row of this
     *  ResultSet object as a java.sql.RowId object in the Java
     *  programming language.
     */
    @stub
    def getRowId(columnLabel: String): RowId = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a short in the Java programming language.
     */
    @stub
    def getShort(columnIndex: Int): Short = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a short in the Java programming language.
     */
    @stub
    def getShort(columnLabel: String): Short = ???

    /** Retrieves the value of the designated column in  the current row of
     *   this ResultSet as a
     *  java.sql.SQLXML object in the Java programming language.
     */
    @stub
    def getSQLXML(columnIndex: Int): SQLXML = ???

    /** Retrieves the value of the designated column in  the current row of
     *   this ResultSet as a
     *  java.sql.SQLXML object in the Java programming language.
     */
    @stub
    def getSQLXML(columnLabel: String): SQLXML = ???

    /** Retrieves the Statement object that produced this
     *  ResultSet object.
     */
    @stub
    def getStatement(): Statement = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a String in the Java programming language.
     */
    @stub
    def getString(columnIndex: Int): String = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a String in the Java programming language.
     */
    @stub
    def getString(columnLabel: String): String = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a java.sql.Time object in the Java programming language.
     */
    @stub
    def getTime(columnIndex: Int): Time = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a java.sql.Time object
     *  in the Java programming language.
     */
    @stub
    def getTime(columnIndex: Int, cal: Calendar): Time = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a java.sql.Time object in the Java programming language.
     */
    @stub
    def getTime(columnLabel: String): Time = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a java.sql.Time object
     *  in the Java programming language.
     */
    @stub
    def getTime(columnLabel: String, cal: Calendar): Time = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a java.sql.Timestamp object in the Java programming language.
     */
    @stub
    def getTimestamp(columnIndex: Int): Timestamp = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a java.sql.Timestamp object
     *  in the Java programming language.
     */
    @stub
    def getTimestamp(columnIndex: Int, cal: Calendar): Timestamp = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as
     *  a java.sql.Timestamp object in the Java programming language.
     */
    @stub
    def getTimestamp(columnLabel: String): Timestamp = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a java.sql.Timestamp object
     *  in the Java programming language.
     */
    @stub
    def getTimestamp(columnLabel: String, cal: Calendar): Timestamp = ???

    /** Retrieves the type of this ResultSet object. */
    @stub
    def getType(): Int = ???

    /** Deprecated. 
     * use getCharacterStream in place of
     *               getUnicodeStream
     * 
     */
    @stub
    def getUnicodeStream(columnIndex: Int): InputStream = ???

    /** Deprecated. 
     * use getCharacterStream instead
     * 
     */
    @stub
    def getUnicodeStream(columnLabel: String): InputStream = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a java.net.URL
     *  object in the Java programming language.
     */
    @stub
    def getURL(columnIndex: Int): URL = ???

    /** Retrieves the value of the designated column in the current row
     *  of this ResultSet object as a java.net.URL
     *  object in the Java programming language.
     */
    @stub
    def getURL(columnLabel: String): URL = ???

    /** Retrieves the first warning reported by calls on this
     *  ResultSet object.
     */
    @stub
    def getWarnings(): SQLWarning = ???

    /** Inserts the contents of the insert row into this
     *  ResultSet object and into the database.
     */
    @stub
    def insertRow(): Unit = ???

    /** Retrieves whether the cursor is after the last row in
     *  this ResultSet object.
     */
    @stub
    def isAfterLast(): Boolean = ???

    /** Retrieves whether the cursor is before the first row in
     *  this ResultSet object.
     */
    @stub
    def isBeforeFirst(): Boolean = ???

    /** Retrieves whether this ResultSet object has been closed. */
    @stub
    def isClosed(): Boolean = ???

    /** Retrieves whether the cursor is on the first row of
     *  this ResultSet object.
     */
    @stub
    def isFirst(): Boolean = ???

    /** Retrieves whether the cursor is on the last row of
     *  this ResultSet object.
     */
    @stub
    def isLast(): Boolean = ???

    /** Moves the cursor to the last row in
     *  this ResultSet object.
     */
    @stub
    def last(): Boolean = ???

    /** Moves the cursor to the remembered cursor position, usually the
     *  current row.
     */
    @stub
    def moveToCurrentRow(): Unit = ???

    /** Moves the cursor to the insert row. */
    @stub
    def moveToInsertRow(): Unit = ???

    /** Moves the cursor forward one row from its current position. */
    @stub
    def next(): Boolean = ???

    /** Moves the cursor to the previous row in this
     *  ResultSet object.
     */
    @stub
    def previous(): Boolean = ???

    /** Refreshes the current row with its most recent value in
     *  the database.
     */
    @stub
    def refreshRow(): Unit = ???

    /** Moves the cursor a relative number of rows, either positive or negative. */
    @stub
    def relative(rows: Int): Boolean = ???

    /** Retrieves whether a row has been deleted. */
    @stub
    def rowDeleted(): Boolean = ???

    /** Retrieves whether the current row has had an insertion. */
    @stub
    def rowInserted(): Boolean = ???

    /** Retrieves whether the current row has been updated. */
    @stub
    def rowUpdated(): Boolean = ???

    /** Gives a hint as to the direction in which the rows in this
     *  ResultSet object will be processed.
     */
    @stub
    def setFetchDirection(direction: Int): Unit = ???

    /** Gives the JDBC driver a hint as to the number of rows that should
     *  be fetched from the database when more rows are needed for this
     *  ResultSet object.
     */
    @stub
    def setFetchSize(rows: Int): Unit = ???

    /** Updates the designated column with a java.sql.Array value. */
    @stub
    def updateArray(columnIndex: Int, x: Array): Unit = ???

    /** Updates the designated column with a java.sql.Array value. */
    @stub
    def updateArray(columnLabel: String, x: Array): Unit = ???

    /** Updates the designated column with an ascii stream value. */
    @stub
    def updateAsciiStream(columnIndex: Int, x: InputStream): Unit = ???

    /** Updates the designated column with an ascii stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateAsciiStream(columnIndex: Int, x: InputStream, length: Int): Unit = ???

    /** Updates the designated column with an ascii stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateAsciiStream(columnIndex: Int, x: InputStream, length: Long): Unit = ???

    /** Updates the designated column with an ascii stream value. */
    @stub
    def updateAsciiStream(columnLabel: String, x: InputStream): Unit = ???

    /** Updates the designated column with an ascii stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateAsciiStream(columnLabel: String, x: InputStream, length: Int): Unit = ???

    /** Updates the designated column with an ascii stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateAsciiStream(columnLabel: String, x: InputStream, length: Long): Unit = ???

    /** Updates the designated column with a java.math.BigDecimal
     *  value.
     */
    @stub
    def updateBigDecimal(columnIndex: Int, x: BigDecimal): Unit = ???

    /** Updates the designated column with a java.sql.BigDecimal
     *  value.
     */
    @stub
    def updateBigDecimal(columnLabel: String, x: BigDecimal): Unit = ???

    /** Updates the designated column with a binary stream value. */
    @stub
    def updateBinaryStream(columnIndex: Int, x: InputStream): Unit = ???

    /** Updates the designated column with a binary stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateBinaryStream(columnIndex: Int, x: InputStream, length: Int): Unit = ???

    /** Updates the designated column with a binary stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateBinaryStream(columnIndex: Int, x: InputStream, length: Long): Unit = ???

    /** Updates the designated column with a binary stream value. */
    @stub
    def updateBinaryStream(columnLabel: String, x: InputStream): Unit = ???

    /** Updates the designated column with a binary stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateBinaryStream(columnLabel: String, x: InputStream, length: Int): Unit = ???

    /** Updates the designated column with a binary stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateBinaryStream(columnLabel: String, x: InputStream, length: Long): Unit = ???

    /** Updates the designated column with a java.sql.Blob value. */
    @stub
    def updateBlob(columnIndex: Int, x: Blob): Unit = ???

    /** Updates the designated column using the given input stream. */
    @stub
    def updateBlob(columnIndex: Int, inputStream: InputStream): Unit = ???

    /** Updates the designated column using the given input stream, which
     *  will have the specified number of bytes.
     */
    @stub
    def updateBlob(columnIndex: Int, inputStream: InputStream, length: Long): Unit = ???

    /** Updates the designated column with a java.sql.Blob value. */
    @stub
    def updateBlob(columnLabel: String, x: Blob): Unit = ???

    /** Updates the designated column using the given input stream. */
    @stub
    def updateBlob(columnLabel: String, inputStream: InputStream): Unit = ???

    /** Updates the designated column using the given input stream, which
     *  will have the specified number of bytes.
     */
    @stub
    def updateBlob(columnLabel: String, inputStream: InputStream, length: Long): Unit = ???

    /** Updates the designated column with a boolean value. */
    @stub
    def updateBoolean(columnIndex: Int, x: Boolean): Unit = ???

    /** Updates the designated column with a boolean value. */
    @stub
    def updateBoolean(columnLabel: String, x: Boolean): Unit = ???

    /** Updates the designated column with a byte value. */
    @stub
    def updateByte(columnIndex: Int, x: Byte): Unit = ???

    /** Updates the designated column with a byte value. */
    @stub
    def updateByte(columnLabel: String, x: Byte): Unit = ???

    /** Updates the designated column with a byte array value. */
    @stub
    def updateBytes(columnIndex: Int, x: Array[Byte]): Unit = ???

    /** Updates the designated column with a byte array value. */
    @stub
    def updateBytes(columnLabel: String, x: Array[Byte]): Unit = ???

    /** Updates the designated column with a character stream value. */
    @stub
    def updateCharacterStream(columnIndex: Int, x: Reader): Unit = ???

    /** Updates the designated column with a character stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateCharacterStream(columnIndex: Int, x: Reader, length: Int): Unit = ???

    /** Updates the designated column with a character stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateCharacterStream(columnIndex: Int, x: Reader, length: Long): Unit = ???

    /** Updates the designated column with a character stream value. */
    @stub
    def updateCharacterStream(columnLabel: String, reader: Reader): Unit = ???

    /** Updates the designated column with a character stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateCharacterStream(columnLabel: String, reader: Reader, length: Int): Unit = ???

    /** Updates the designated column with a character stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateCharacterStream(columnLabel: String, reader: Reader, length: Long): Unit = ???

    /** Updates the designated column with a java.sql.Clob value. */
    @stub
    def updateClob(columnIndex: Int, x: Clob): Unit = ???

    /** Updates the designated column using the given Reader
     *  object.
     */
    @stub
    def updateClob(columnIndex: Int, reader: Reader): Unit = ???

    /** Updates the designated column using the given Reader
     *  object, which is the given number of characters long.
     */
    @stub
    def updateClob(columnIndex: Int, reader: Reader, length: Long): Unit = ???

    /** Updates the designated column with a java.sql.Clob value. */
    @stub
    def updateClob(columnLabel: String, x: Clob): Unit = ???

    /** Updates the designated column using the given Reader
     *  object.
     */
    @stub
    def updateClob(columnLabel: String, reader: Reader): Unit = ???

    /** Updates the designated column using the given Reader
     *  object, which is the given number of characters long.
     */
    @stub
    def updateClob(columnLabel: String, reader: Reader, length: Long): Unit = ???

    /** Updates the designated column with a java.sql.Date value. */
    @stub
    def updateDate(columnIndex: Int, x: Date): Unit = ???

    /** Updates the designated column with a java.sql.Date value. */
    @stub
    def updateDate(columnLabel: String, x: Date): Unit = ???

    /** Updates the designated column with a double value. */
    @stub
    def updateDouble(columnIndex: Int, x: Double): Unit = ???

    /** Updates the designated column with a double value. */
    @stub
    def updateDouble(columnLabel: String, x: Double): Unit = ???

    /** Updates the designated column with a float value. */
    @stub
    def updateFloat(columnIndex: Int, x: Float): Unit = ???

    /** Updates the designated column with a float  value. */
    @stub
    def updateFloat(columnLabel: String, x: Float): Unit = ???

    /** Updates the designated column with an int value. */
    @stub
    def updateInt(columnIndex: Int, x: Int): Unit = ???

    /** Updates the designated column with an int value. */
    @stub
    def updateInt(columnLabel: String, x: Int): Unit = ???

    /** Updates the designated column with a long value. */
    @stub
    def updateLong(columnIndex: Int, x: Long): Unit = ???

    /** Updates the designated column with a long value. */
    @stub
    def updateLong(columnLabel: String, x: Long): Unit = ???

    /** Updates the designated column with a character stream value. */
    @stub
    def updateNCharacterStream(columnIndex: Int, x: Reader): Unit = ???

    /** Updates the designated column with a character stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateNCharacterStream(columnIndex: Int, x: Reader, length: Long): Unit = ???

    /** Updates the designated column with a character stream value. */
    @stub
    def updateNCharacterStream(columnLabel: String, reader: Reader): Unit = ???

    /** Updates the designated column with a character stream value, which will have
     *  the specified number of bytes.
     */
    @stub
    def updateNCharacterStream(columnLabel: String, reader: Reader, length: Long): Unit = ???

    /** Updates the designated column with a java.sql.NClob value. */
    @stub
    def updateNClob(columnIndex: Int, nClob: NClob): Unit = ???

    /** Updates the designated column using the given Reader
     * 
     *  The data will be read from the stream
     *  as needed until end-of-stream is reached.
     */
    @stub
    def updateNClob(columnIndex: Int, reader: Reader): Unit = ???

    /** Updates the designated column using the given Reader
     *  object, which is the given number of characters long.
     */
    @stub
    def updateNClob(columnIndex: Int, reader: Reader, length: Long): Unit = ???

    /** Updates the designated column with a java.sql.NClob value. */
    @stub
    def updateNClob(columnLabel: String, nClob: NClob): Unit = ???

    /** Updates the designated column using the given Reader
     *  object.
     */
    @stub
    def updateNClob(columnLabel: String, reader: Reader): Unit = ???

    /** Updates the designated column using the given Reader
     *  object, which is the given number of characters long.
     */
    @stub
    def updateNClob(columnLabel: String, reader: Reader, length: Long): Unit = ???

    /** Updates the designated column with a String value. */
    @stub
    def updateNString(columnIndex: Int, nString: String): Unit = ???

    /** Updates the designated column with a String value. */
    @stub
    def updateNString(columnLabel: String, nString: String): Unit = ???

    /** Updates the designated column with a null value. */
    @stub
    def updateNull(columnIndex: Int): Unit = ???

    /** Updates the designated column with a null value. */
    @stub
    def updateNull(columnLabel: String): Unit = ???

    /** Updates the designated column with an Object value. */
    @stub
    def updateObject(columnIndex: Int, x: Object): Unit = ???

    /** Updates the designated column with an Object value. */
    @stub
    def updateObject(columnIndex: Int, x: Object, scaleOrLength: Int): Unit = ???

    /** Updates the designated column with an Object value. */
    @stub
    val Unit: default = ???

    /** Updates the designated column with an Object value. */
    @stub
    val Unit: default = ???

    /** Updates the designated column with an Object value. */
    @stub
    def updateObject(columnLabel: String, x: Object): Unit = ???

    /** Updates the designated column with an Object value. */
    @stub
    def updateObject(columnLabel: String, x: Object, scaleOrLength: Int): Unit = ???

    /** Updates the designated column with an Object value. */
    @stub
    val Unit: default = ???

    /** Updates the designated column with an Object value. */
    @stub
    val Unit: default = ???

    /** Updates the designated column with a java.sql.Ref value. */
    @stub
    def updateRef(columnIndex: Int, x: Ref): Unit = ???

    /** Updates the designated column with a java.sql.Ref value. */
    @stub
    def updateRef(columnLabel: String, x: Ref): Unit = ???

    /** Updates the underlying database with the new contents of the
     *  current row of this ResultSet object.
     */
    @stub
    def updateRow(): Unit = ???

    /** Updates the designated column with a RowId value. */
    @stub
    def updateRowId(columnIndex: Int, x: RowId): Unit = ???

    /** Updates the designated column with a RowId value. */
    @stub
    def updateRowId(columnLabel: String, x: RowId): Unit = ???

    /** Updates the designated column with a short value. */
    @stub
    def updateShort(columnIndex: Int, x: Short): Unit = ???

    /** Updates the designated column with a short value. */
    @stub
    def updateShort(columnLabel: String, x: Short): Unit = ???

    /** Updates the designated column with a java.sql.SQLXML value. */
    @stub
    def updateSQLXML(columnIndex: Int, xmlObject: SQLXML): Unit = ???

    /** Updates the designated column with a java.sql.SQLXML value. */
    @stub
    def updateSQLXML(columnLabel: String, xmlObject: SQLXML): Unit = ???

    /** Updates the designated column with a String value. */
    @stub
    def updateString(columnIndex: Int, x: String): Unit = ???

    /** Updates the designated column with a String value. */
    @stub
    def updateString(columnLabel: String, x: String): Unit = ???

    /** Updates the designated column with a java.sql.Time value. */
    @stub
    def updateTime(columnIndex: Int, x: Time): Unit = ???

    /** Updates the designated column with a java.sql.Time value. */
    @stub
    def updateTime(columnLabel: String, x: Time): Unit = ???

    /** Updates the designated column with a java.sql.Timestamp
     *  value.
     */
    @stub
    def updateTimestamp(columnIndex: Int, x: Timestamp): Unit = ???

    /** Updates the designated column with a java.sql.Timestamp
     *  value.
     */
    @stub
    def updateTimestamp(columnLabel: String, x: Timestamp): Unit = ???

    /** Reports whether
     *  the last column read had a value of SQL NULL.
     */
    @stub
    def wasNull(): Boolean = ???
}

object ResultSet {
    /** The constant indicating that open ResultSet objects with this
     *  holdability will be closed when the current transaction is committed.
     */
    @stub
    val CLOSE_CURSORS_AT_COMMIT: Int = ???

    /** The constant indicating the concurrency mode for a
     *  ResultSet object that may NOT be updated.
     */
    @stub
    val CONCUR_READ_ONLY: Int = ???

    /** The constant indicating the concurrency mode for a
     *  ResultSet object that may be updated.
     */
    @stub
    val CONCUR_UPDATABLE: Int = ???

    /** The constant indicating that the rows in a result set will be
     *  processed in a forward direction; first-to-last.
     */
    @stub
    val FETCH_FORWARD: Int = ???

    /** The constant indicating that the rows in a result set will be
     *  processed in a reverse direction; last-to-first.
     */
    @stub
    val FETCH_REVERSE: Int = ???

    /** The constant indicating that the order in which rows in a
     *  result set will be processed is unknown.
     */
    @stub
    val FETCH_UNKNOWN: Int = ???

    /** The constant indicating that open ResultSet objects with this
     *  holdability will remain open when the current transaction is committed.
     */
    @stub
    val HOLD_CURSORS_OVER_COMMIT: Int = ???

    /** The constant indicating the type for a ResultSet object
     *  whose cursor may move only forward.
     */
    @stub
    val TYPE_FORWARD_ONLY: Int = ???

    /** The constant indicating the type for a ResultSet object
     *  that is scrollable but generally not sensitive to changes to the data
     *  that underlies the ResultSet.
     */
    @stub
    val TYPE_SCROLL_INSENSITIVE: Int = ???

    /** The constant indicating the type for a ResultSet object
     *  that is scrollable and generally sensitive to changes to the data
     *  that underlies the ResultSet.
     */
    @stub
    val TYPE_SCROLL_SENSITIVE: Int = ???
}
