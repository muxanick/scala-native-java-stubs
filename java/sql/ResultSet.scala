package java.sql

import java.io.{InputStream, Reader}
import java.lang.{AutoCloseable, Class, Object, String}
import java.math.BigDecimal
import java.net.URL
import java.util.{Calendar, Map}

// A table of data representing a database result set, which
// is usually generated by executing a statement that queries the database.
//
// A ResultSet object  maintains a cursor pointing
// to its current row of data.  Initially the cursor is positioned
// before the first row. The next method moves the
// cursor to the next row, and because it returns false
// when there are no more rows in the ResultSet object,
// it can be used in a while loop to iterate through
// the result set.
// 
// A default ResultSet object is not updatable and
// has a cursor that moves forward only.  Thus, you can
// iterate through it only once and only from the first row to the
// last row. It is possible to
// produce ResultSet objects that are scrollable and/or
// updatable.  The following code fragment, in which con
// is a valid Connection object, illustrates how to make
// a result set that is scrollable and insensitive to updates by others, and
// that is updatable. See ResultSet fields for other
// options.
// 
//
//       Statement stmt = con.createStatement(
//                                      ResultSet.TYPE_SCROLL_INSENSITIVE,
//                                      ResultSet.CONCUR_UPDATABLE);
//       ResultSet rs = stmt.executeQuery("SELECT a, b FROM TABLE2");
//       // rs will be scrollable, will not show changes made by others,
//       // and will be updatable
//
// 
// The ResultSet interface provides
// getter methods (getBoolean, getLong, and so on)
// for retrieving column values from the current row.
// Values can be retrieved using either the index number of the
// column or the name of the column.  In general, using the
// column index will be more efficient.  Columns are numbered from 1.
// For maximum portability, result set columns within each row should be
// read in left-to-right order, and each column should be read only once.
//
// For the getter methods, a JDBC driver attempts
// to convert the underlying data to the Java type specified in the
// getter method and returns a suitable Java value.  The JDBC specification
// has a table showing the allowable mappings from SQL types to Java types
// that can be used by the ResultSet getter methods.
//
// Column names used as input to getter methods are case
// insensitive.  When a getter method is called  with
// a column name and several columns have the same name,
// the value of the first matching column will be returned.
// The column name option is
// designed to be used when column names are used in the SQL
// query that generated the result set.
// For columns that are NOT explicitly named in the query, it
// is best to use column numbers. If column names are used, the
// programmer should take care to guarantee that they uniquely refer to
// the intended columns, which can be assured with the SQL AS clause.
// 
// A set of updater methods were added to this interface
// in the JDBC 2.0 API (Java™ 2 SDK,
// Standard Edition, version 1.2). The comments regarding parameters
// to the getter methods also apply to parameters to the
// updater methods.
//
// The updater methods may be used in two ways:
// 
// to update a column value in the current row.  In a scrollable
//     ResultSet object, the cursor can be moved backwards
//     and forwards, to an absolute position, or to a position
//     relative to the current row.
//     The following code fragment updates the NAME column
//     in the fifth row of the ResultSet object
//     rs and then uses the method updateRow
//     to update the data source table from which rs was derived.
// 
//
//       rs.absolute(5); // moves the cursor to the fifth row of rs
//       rs.updateString("NAME", "AINSWORTH"); // updates the
//          // NAME column of row 5 to be AINSWORTH
//       rs.updateRow(); // updates the row in the data source
//
// 
// to insert column values into the insert row.  An updatable
//     ResultSet object has a special row associated with
//     it that serves as a staging area for building a row to be inserted.
//     The following code fragment moves the cursor to the insert row, builds
//     a three-column row, and inserts it into rs and into
//     the data source table using the method insertRow.
// 
//
//       rs.moveToInsertRow(); // moves cursor to the insert row
//       rs.updateString(1, "AINSWORTH"); // updates the
//          // first column of the insert row to be AINSWORTH
//       rs.updateInt(2,35); // updates the second column to be 35
//       rs.updateBoolean(3, true); // updates the third column to true
//       rs.insertRow();
//       rs.moveToCurrentRow();
//
// 
// 
// A ResultSet object is automatically closed when the
// Statement object that
// generated it is closed, re-executed, or used
// to retrieve the next result from a sequence of multiple results.
//
// The number, types and properties of a ResultSet
// object's columns are provided by the ResultSetMetaData
// object returned by the ResultSet.getMetaData method.
trait ResultSet extends Wrapper , AutoCloseable {

    @stub
    // Moves the cursor to the given row number in
    // this ResultSet object.
    def absolute(row: Int): Boolean = ???

    @stub
    // Moves the cursor to the end of
    // this ResultSet object, just after the
    // last row.
    def afterLast(): Unit = ???

    @stub
    // Moves the cursor to the front of
    // this ResultSet object, just before the
    // first row.
    def beforeFirst(): Unit = ???

    @stub
    // Cancels the updates made to the current row in this
    // ResultSet object.
    def cancelRowUpdates(): Unit = ???

    @stub
    // Clears all warnings reported on this ResultSet object.
    def clearWarnings(): Unit = ???

    @stub
    // Releases this ResultSet object's database and
    // JDBC resources immediately instead of waiting for
    // this to happen when it is automatically closed.
    def close(): Unit = ???

    @stub
    // Deletes the current row from this ResultSet object
    // and from the underlying database.
    def deleteRow(): Unit = ???

    @stub
    // Maps the given ResultSet column label to its
    // ResultSet column index.
    def findColumn(columnLabel: String): Int = ???

    @stub
    // Moves the cursor to the first row in
    // this ResultSet object.
    def first(): Boolean = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as an Array object
    // in the Java programming language.
    def getArray(columnIndex: Int): Array = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as an Array object
    // in the Java programming language.
    def getArray(columnLabel: String): Array = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a stream of ASCII characters.
    def getAsciiStream(columnIndex: Int): InputStream = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a stream of
    // ASCII characters.
    def getAsciiStream(columnLabel: String): InputStream = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a
    // java.math.BigDecimal with full precision.
    def getBigDecimal(columnIndex: Int): BigDecimal = ???

    @stub
    // Deprecated. 
    //Use getBigDecimal(int columnIndex)
    //             or getBigDecimal(String columnLabel)
    //
    def getBigDecimal(columnIndex: Int, scale: Int): BigDecimal = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a
    // java.math.BigDecimal with full precision.
    def getBigDecimal(columnLabel: String): BigDecimal = ???

    @stub
    // Deprecated. 
    //Use getBigDecimal(int columnIndex)
    //             or getBigDecimal(String columnLabel)
    //
    def getBigDecimal(columnLabel: String, scale: Int): BigDecimal = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a  stream of
    // uninterpreted bytes.
    def getBinaryStream(columnIndex: Int): InputStream = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a stream of uninterpreted
    // bytes.
    def getBinaryStream(columnLabel: String): InputStream = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a Blob object
    // in the Java programming language.
    def getBlob(columnIndex: Int): Blob = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a Blob object
    // in the Java programming language.
    def getBlob(columnLabel: String): Blob = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a boolean in the Java programming language.
    def getBoolean(columnIndex: Int): Boolean = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a boolean in the Java programming language.
    def getBoolean(columnLabel: String): Boolean = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a byte in the Java programming language.
    def getByte(columnIndex: Int): Byte = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a byte in the Java programming language.
    def getByte(columnLabel: String): Byte = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a byte array in the Java programming language.
    def getBytes(columnIndex: Int): Array[Byte] = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a byte array in the Java programming language.
    def getBytes(columnLabel: String): Array[Byte] = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a
    // java.io.Reader object.
    def getCharacterStream(columnIndex: Int): Reader = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a
    // java.io.Reader object.
    def getCharacterStream(columnLabel: String): Reader = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a Clob object
    // in the Java programming language.
    def getClob(columnIndex: Int): Clob = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a Clob object
    // in the Java programming language.
    def getClob(columnLabel: String): Clob = ???

    @stub
    // Retrieves the concurrency mode of this ResultSet object.
    def getConcurrency(): Int = ???

    @stub
    // Retrieves the name of the SQL cursor used by this ResultSet
    // object.
    def getCursorName(): String = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a java.sql.Date object in the Java programming language.
    def getDate(columnIndex: Int): Date = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a java.sql.Date object
    // in the Java programming language.
    def getDate(columnIndex: Int, cal: Calendar): Date = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a java.sql.Date object in the Java programming language.
    def getDate(columnLabel: String): Date = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a java.sql.Date object
    // in the Java programming language.
    def getDate(columnLabel: String, cal: Calendar): Date = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a double in the Java programming language.
    def getDouble(columnIndex: Int): double = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a double in the Java programming language.
    def getDouble(columnLabel: String): double = ???

    @stub
    // Retrieves the fetch direction for this
    // ResultSet object.
    def getFetchDirection(): Int = ???

    @stub
    // Retrieves the fetch size for this
    // ResultSet object.
    def getFetchSize(): Int = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a float in the Java programming language.
    def getFloat(columnIndex: Int): float = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a float in the Java programming language.
    def getFloat(columnLabel: String): float = ???

    @stub
    // Retrieves the holdability of this ResultSet object
    def getHoldability(): Int = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // an int in the Java programming language.
    def getInt(columnIndex: Int): Int = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // an int in the Java programming language.
    def getInt(columnLabel: String): Int = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a long in the Java programming language.
    def getLong(columnIndex: Int): Long = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a long in the Java programming language.
    def getLong(columnLabel: String): Long = ???

    @stub
    // Retrieves the  number, types and properties of
    // this ResultSet object's columns.
    def getMetaData(): ResultSetMetaData = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a
    // java.io.Reader object.
    def getNCharacterStream(columnIndex: Int): Reader = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a
    // java.io.Reader object.
    def getNCharacterStream(columnLabel: String): Reader = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a NClob object
    // in the Java programming language.
    def getNClob(columnIndex: Int): NClob = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a NClob object
    // in the Java programming language.
    def getNClob(columnLabel: String): NClob = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a String in the Java programming language.
    def getNString(columnIndex: Int): String = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a String in the Java programming language.
    def getNString(columnLabel: String): String = ???

    @stub
    // Gets the value of the designated column in the current row
    // of this ResultSet object as
    // an Object in the Java programming language.
    def getObject(columnIndex: Int): Object = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object and will convert from the
    // SQL type of the column to the requested Java data type, if the
    // conversion is supported.
    def T: [T] = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as an Object
    // in the Java programming language.
    def getObject(columnIndex: Int, map: Map[String, Class[_]]): Object = ???

    @stub
    // Gets the value of the designated column in the current row
    // of this ResultSet object as
    // an Object in the Java programming language.
    def getObject(columnLabel: String): Object = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object and will convert from the
    // SQL type of the column to the requested Java data type, if the
    // conversion is supported.
    def T: [T] = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as an Object
    // in the Java programming language.
    def getObject(columnLabel: String, map: Map[String, Class[_]]): Object = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a Ref object
    // in the Java programming language.
    def getRef(columnIndex: Int): Ref = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a Ref object
    // in the Java programming language.
    def getRef(columnLabel: String): Ref = ???

    @stub
    // Retrieves the current row number.
    def getRow(): Int = ???

    @stub
    // Retrieves the value of the designated column in the current row of this
    // ResultSet object as a java.sql.RowId object in the Java
    // programming language.
    def getRowId(columnIndex: Int): RowId = ???

    @stub
    // Retrieves the value of the designated column in the current row of this
    // ResultSet object as a java.sql.RowId object in the Java
    // programming language.
    def getRowId(columnLabel: String): RowId = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a short in the Java programming language.
    def getShort(columnIndex: Int): Short = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a short in the Java programming language.
    def getShort(columnLabel: String): Short = ???

    @stub
    // Retrieves the value of the designated column in  the current row of
    //  this ResultSet as a
    // java.sql.SQLXML object in the Java programming language.
    def getSQLXML(columnIndex: Int): SQLXML = ???

    @stub
    // Retrieves the value of the designated column in  the current row of
    //  this ResultSet as a
    // java.sql.SQLXML object in the Java programming language.
    def getSQLXML(columnLabel: String): SQLXML = ???

    @stub
    // Retrieves the Statement object that produced this
    // ResultSet object.
    def getStatement(): Statement = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a String in the Java programming language.
    def getString(columnIndex: Int): String = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a String in the Java programming language.
    def getString(columnLabel: String): String = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a java.sql.Time object in the Java programming language.
    def getTime(columnIndex: Int): Time = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a java.sql.Time object
    // in the Java programming language.
    def getTime(columnIndex: Int, cal: Calendar): Time = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a java.sql.Time object in the Java programming language.
    def getTime(columnLabel: String): Time = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a java.sql.Time object
    // in the Java programming language.
    def getTime(columnLabel: String, cal: Calendar): Time = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a java.sql.Timestamp object in the Java programming language.
    def getTimestamp(columnIndex: Int): Timestamp = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a java.sql.Timestamp object
    // in the Java programming language.
    def getTimestamp(columnIndex: Int, cal: Calendar): Timestamp = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as
    // a java.sql.Timestamp object in the Java programming language.
    def getTimestamp(columnLabel: String): Timestamp = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a java.sql.Timestamp object
    // in the Java programming language.
    def getTimestamp(columnLabel: String, cal: Calendar): Timestamp = ???

    @stub
    // Retrieves the type of this ResultSet object.
    def getType(): Int = ???

    @stub
    // Deprecated. 
    //use getCharacterStream in place of
    //              getUnicodeStream
    //
    def getUnicodeStream(columnIndex: Int): InputStream = ???

    @stub
    // Deprecated. 
    //use getCharacterStream instead
    //
    def getUnicodeStream(columnLabel: String): InputStream = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a java.net.URL
    // object in the Java programming language.
    def getURL(columnIndex: Int): URL = ???

    @stub
    // Retrieves the value of the designated column in the current row
    // of this ResultSet object as a java.net.URL
    // object in the Java programming language.
    def getURL(columnLabel: String): URL = ???

    @stub
    // Retrieves the first warning reported by calls on this
    // ResultSet object.
    def getWarnings(): SQLWarning = ???

    @stub
    // Inserts the contents of the insert row into this
    // ResultSet object and into the database.
    def insertRow(): Unit = ???

    @stub
    // Retrieves whether the cursor is after the last row in
    // this ResultSet object.
    def isAfterLast(): Boolean = ???

    @stub
    // Retrieves whether the cursor is before the first row in
    // this ResultSet object.
    def isBeforeFirst(): Boolean = ???

    @stub
    // Retrieves whether this ResultSet object has been closed.
    def isClosed(): Boolean = ???

    @stub
    // Retrieves whether the cursor is on the first row of
    // this ResultSet object.
    def isFirst(): Boolean = ???

    @stub
    // Retrieves whether the cursor is on the last row of
    // this ResultSet object.
    def isLast(): Boolean = ???

    @stub
    // Moves the cursor to the last row in
    // this ResultSet object.
    def last(): Boolean = ???

    @stub
    // Moves the cursor to the remembered cursor position, usually the
    // current row.
    def moveToCurrentRow(): Unit = ???

    @stub
    // Moves the cursor to the insert row.
    def moveToInsertRow(): Unit = ???

    @stub
    // Moves the cursor forward one row from its current position.
    def next(): Boolean = ???

    @stub
    // Moves the cursor to the previous row in this
    // ResultSet object.
    def previous(): Boolean = ???

    @stub
    // Refreshes the current row with its most recent value in
    // the database.
    def refreshRow(): Unit = ???

    @stub
    // Moves the cursor a relative number of rows, either positive or negative.
    def relative(rows: Int): Boolean = ???

    @stub
    // Retrieves whether a row has been deleted.
    def rowDeleted(): Boolean = ???

    @stub
    // Retrieves whether the current row has had an insertion.
    def rowInserted(): Boolean = ???

    @stub
    // Retrieves whether the current row has been updated.
    def rowUpdated(): Boolean = ???

    @stub
    // Gives a hint as to the direction in which the rows in this
    // ResultSet object will be processed.
    def setFetchDirection(direction: Int): Unit = ???

    @stub
    // Gives the JDBC driver a hint as to the number of rows that should
    // be fetched from the database when more rows are needed for this
    // ResultSet object.
    def setFetchSize(rows: Int): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Array value.
    def updateArray(columnIndex: Int, x: Array): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Array value.
    def updateArray(columnLabel: String, x: Array): Unit = ???

    @stub
    // Updates the designated column with an ascii stream value.
    def updateAsciiStream(columnIndex: Int, x: InputStream): Unit = ???

    @stub
    // Updates the designated column with an ascii stream value, which will have
    // the specified number of bytes.
    def updateAsciiStream(columnIndex: Int, x: InputStream, length: Int): Unit = ???

    @stub
    // Updates the designated column with an ascii stream value, which will have
    // the specified number of bytes.
    def updateAsciiStream(columnIndex: Int, x: InputStream, length: Long): Unit = ???

    @stub
    // Updates the designated column with an ascii stream value.
    def updateAsciiStream(columnLabel: String, x: InputStream): Unit = ???

    @stub
    // Updates the designated column with an ascii stream value, which will have
    // the specified number of bytes.
    def updateAsciiStream(columnLabel: String, x: InputStream, length: Int): Unit = ???

    @stub
    // Updates the designated column with an ascii stream value, which will have
    // the specified number of bytes.
    def updateAsciiStream(columnLabel: String, x: InputStream, length: Long): Unit = ???

    @stub
    // Updates the designated column with a java.math.BigDecimal
    // value.
    def updateBigDecimal(columnIndex: Int, x: BigDecimal): Unit = ???

    @stub
    // Updates the designated column with a java.sql.BigDecimal
    // value.
    def updateBigDecimal(columnLabel: String, x: BigDecimal): Unit = ???

    @stub
    // Updates the designated column with a binary stream value.
    def updateBinaryStream(columnIndex: Int, x: InputStream): Unit = ???

    @stub
    // Updates the designated column with a binary stream value, which will have
    // the specified number of bytes.
    def updateBinaryStream(columnIndex: Int, x: InputStream, length: Int): Unit = ???

    @stub
    // Updates the designated column with a binary stream value, which will have
    // the specified number of bytes.
    def updateBinaryStream(columnIndex: Int, x: InputStream, length: Long): Unit = ???

    @stub
    // Updates the designated column with a binary stream value.
    def updateBinaryStream(columnLabel: String, x: InputStream): Unit = ???

    @stub
    // Updates the designated column with a binary stream value, which will have
    // the specified number of bytes.
    def updateBinaryStream(columnLabel: String, x: InputStream, length: Int): Unit = ???

    @stub
    // Updates the designated column with a binary stream value, which will have
    // the specified number of bytes.
    def updateBinaryStream(columnLabel: String, x: InputStream, length: Long): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Blob value.
    def updateBlob(columnIndex: Int, x: Blob): Unit = ???

    @stub
    // Updates the designated column using the given input stream.
    def updateBlob(columnIndex: Int, inputStream: InputStream): Unit = ???

    @stub
    // Updates the designated column using the given input stream, which
    // will have the specified number of bytes.
    def updateBlob(columnIndex: Int, inputStream: InputStream, length: Long): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Blob value.
    def updateBlob(columnLabel: String, x: Blob): Unit = ???

    @stub
    // Updates the designated column using the given input stream.
    def updateBlob(columnLabel: String, inputStream: InputStream): Unit = ???

    @stub
    // Updates the designated column using the given input stream, which
    // will have the specified number of bytes.
    def updateBlob(columnLabel: String, inputStream: InputStream, length: Long): Unit = ???

    @stub
    // Updates the designated column with a boolean value.
    def updateBoolean(columnIndex: Int, x: Boolean): Unit = ???

    @stub
    // Updates the designated column with a boolean value.
    def updateBoolean(columnLabel: String, x: Boolean): Unit = ???

    @stub
    // Updates the designated column with a byte value.
    def updateByte(columnIndex: Int, x: Byte): Unit = ???

    @stub
    // Updates the designated column with a byte value.
    def updateByte(columnLabel: String, x: Byte): Unit = ???

    @stub
    // Updates the designated column with a byte array value.
    def updateBytes(columnIndex: Int, x: Array[Byte]): Unit = ???

    @stub
    // Updates the designated column with a byte array value.
    def updateBytes(columnLabel: String, x: Array[Byte]): Unit = ???

    @stub
    // Updates the designated column with a character stream value.
    def updateCharacterStream(columnIndex: Int, x: Reader): Unit = ???

    @stub
    // Updates the designated column with a character stream value, which will have
    // the specified number of bytes.
    def updateCharacterStream(columnIndex: Int, x: Reader, length: Int): Unit = ???

    @stub
    // Updates the designated column with a character stream value, which will have
    // the specified number of bytes.
    def updateCharacterStream(columnIndex: Int, x: Reader, length: Long): Unit = ???

    @stub
    // Updates the designated column with a character stream value.
    def updateCharacterStream(columnLabel: String, reader: Reader): Unit = ???

    @stub
    // Updates the designated column with a character stream value, which will have
    // the specified number of bytes.
    def updateCharacterStream(columnLabel: String, reader: Reader, length: Int): Unit = ???

    @stub
    // Updates the designated column with a character stream value, which will have
    // the specified number of bytes.
    def updateCharacterStream(columnLabel: String, reader: Reader, length: Long): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Clob value.
    def updateClob(columnIndex: Int, x: Clob): Unit = ???

    @stub
    // Updates the designated column using the given Reader
    // object.
    def updateClob(columnIndex: Int, reader: Reader): Unit = ???

    @stub
    // Updates the designated column using the given Reader
    // object, which is the given number of characters long.
    def updateClob(columnIndex: Int, reader: Reader, length: Long): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Clob value.
    def updateClob(columnLabel: String, x: Clob): Unit = ???

    @stub
    // Updates the designated column using the given Reader
    // object.
    def updateClob(columnLabel: String, reader: Reader): Unit = ???

    @stub
    // Updates the designated column using the given Reader
    // object, which is the given number of characters long.
    def updateClob(columnLabel: String, reader: Reader, length: Long): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Date value.
    def updateDate(columnIndex: Int, x: Date): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Date value.
    def updateDate(columnLabel: String, x: Date): Unit = ???

    @stub
    // Updates the designated column with a double value.
    def updateDouble(columnIndex: Int, x: double): Unit = ???

    @stub
    // Updates the designated column with a double value.
    def updateDouble(columnLabel: String, x: double): Unit = ???

    @stub
    // Updates the designated column with a float value.
    def updateFloat(columnIndex: Int, x: float): Unit = ???

    @stub
    // Updates the designated column with a float  value.
    def updateFloat(columnLabel: String, x: float): Unit = ???

    @stub
    // Updates the designated column with an int value.
    def updateInt(columnIndex: Int, x: Int): Unit = ???

    @stub
    // Updates the designated column with an int value.
    def updateInt(columnLabel: String, x: Int): Unit = ???

    @stub
    // Updates the designated column with a long value.
    def updateLong(columnIndex: Int, x: Long): Unit = ???

    @stub
    // Updates the designated column with a long value.
    def updateLong(columnLabel: String, x: Long): Unit = ???

    @stub
    // Updates the designated column with a character stream value.
    def updateNCharacterStream(columnIndex: Int, x: Reader): Unit = ???

    @stub
    // Updates the designated column with a character stream value, which will have
    // the specified number of bytes.
    def updateNCharacterStream(columnIndex: Int, x: Reader, length: Long): Unit = ???

    @stub
    // Updates the designated column with a character stream value.
    def updateNCharacterStream(columnLabel: String, reader: Reader): Unit = ???

    @stub
    // Updates the designated column with a character stream value, which will have
    // the specified number of bytes.
    def updateNCharacterStream(columnLabel: String, reader: Reader, length: Long): Unit = ???

    @stub
    // Updates the designated column with a java.sql.NClob value.
    def updateNClob(columnIndex: Int, nClob: NClob): Unit = ???

    @stub
    // Updates the designated column using the given Reader
    //
    // The data will be read from the stream
    // as needed until end-of-stream is reached.
    def updateNClob(columnIndex: Int, reader: Reader): Unit = ???

    @stub
    // Updates the designated column using the given Reader
    // object, which is the given number of characters long.
    def updateNClob(columnIndex: Int, reader: Reader, length: Long): Unit = ???

    @stub
    // Updates the designated column with a java.sql.NClob value.
    def updateNClob(columnLabel: String, nClob: NClob): Unit = ???

    @stub
    // Updates the designated column using the given Reader
    // object.
    def updateNClob(columnLabel: String, reader: Reader): Unit = ???

    @stub
    // Updates the designated column using the given Reader
    // object, which is the given number of characters long.
    def updateNClob(columnLabel: String, reader: Reader, length: Long): Unit = ???

    @stub
    // Updates the designated column with a String value.
    def updateNString(columnIndex: Int, nString: String): Unit = ???

    @stub
    // Updates the designated column with a String value.
    def updateNString(columnLabel: String, nString: String): Unit = ???

    @stub
    // Updates the designated column with a null value.
    def updateNull(columnIndex: Int): Unit = ???

    @stub
    // Updates the designated column with a null value.
    def updateNull(columnLabel: String): Unit = ???

    @stub
    // Updates the designated column with an Object value.
    def updateObject(columnIndex: Int, x: Object): Unit = ???

    @stub
    // Updates the designated column with an Object value.
    def updateObject(columnIndex: Int, x: Object, scaleOrLength: Int): Unit = ???

    @stub
    // Updates the designated column with an Object value.
    def Unit: default = ???

    @stub
    // Updates the designated column with an Object value.
    def Unit: default = ???

    @stub
    // Updates the designated column with an Object value.
    def updateObject(columnLabel: String, x: Object): Unit = ???

    @stub
    // Updates the designated column with an Object value.
    def updateObject(columnLabel: String, x: Object, scaleOrLength: Int): Unit = ???

    @stub
    // Updates the designated column with an Object value.
    def Unit: default = ???

    @stub
    // Updates the designated column with an Object value.
    def Unit: default = ???

    @stub
    // Updates the designated column with a java.sql.Ref value.
    def updateRef(columnIndex: Int, x: Ref): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Ref value.
    def updateRef(columnLabel: String, x: Ref): Unit = ???

    @stub
    // Updates the underlying database with the new contents of the
    // current row of this ResultSet object.
    def updateRow(): Unit = ???

    @stub
    // Updates the designated column with a RowId value.
    def updateRowId(columnIndex: Int, x: RowId): Unit = ???

    @stub
    // Updates the designated column with a RowId value.
    def updateRowId(columnLabel: String, x: RowId): Unit = ???

    @stub
    // Updates the designated column with a short value.
    def updateShort(columnIndex: Int, x: Short): Unit = ???

    @stub
    // Updates the designated column with a short value.
    def updateShort(columnLabel: String, x: Short): Unit = ???

    @stub
    // Updates the designated column with a java.sql.SQLXML value.
    def updateSQLXML(columnIndex: Int, xmlObject: SQLXML): Unit = ???

    @stub
    // Updates the designated column with a java.sql.SQLXML value.
    def updateSQLXML(columnLabel: String, xmlObject: SQLXML): Unit = ???

    @stub
    // Updates the designated column with a String value.
    def updateString(columnIndex: Int, x: String): Unit = ???

    @stub
    // Updates the designated column with a String value.
    def updateString(columnLabel: String, x: String): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Time value.
    def updateTime(columnIndex: Int, x: Time): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Time value.
    def updateTime(columnLabel: String, x: Time): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Timestamp
    // value.
    def updateTimestamp(columnIndex: Int, x: Timestamp): Unit = ???

    @stub
    // Updates the designated column with a java.sql.Timestamp
    // value.
    def updateTimestamp(columnLabel: String, x: Timestamp): Unit = ???
}

object ResultSet {
    @stub
    // The constant indicating that open ResultSet objects with this
    // holdability will be closed when the current transaction is committed.
    def CLOSE_CURSORS_AT_COMMIT: Int = ???

    @stub
    // The constant indicating the concurrency mode for a
    // ResultSet object that may NOT be updated.
    def CONCUR_READ_ONLY: Int = ???

    @stub
    // The constant indicating the concurrency mode for a
    // ResultSet object that may be updated.
    def CONCUR_UPDATABLE: Int = ???

    @stub
    // The constant indicating that the rows in a result set will be
    // processed in a forward direction; first-to-last.
    def FETCH_FORWARD: Int = ???

    @stub
    // The constant indicating that the rows in a result set will be
    // processed in a reverse direction; last-to-first.
    def FETCH_REVERSE: Int = ???

    @stub
    // The constant indicating that the order in which rows in a
    // result set will be processed is unknown.
    def FETCH_UNKNOWN: Int = ???

    @stub
    // The constant indicating that open ResultSet objects with this
    // holdability will remain open when the current transaction is committed.
    def HOLD_CURSORS_OVER_COMMIT: Int = ???

    @stub
    // The constant indicating the type for a ResultSet object
    // whose cursor may move only forward.
    def TYPE_FORWARD_ONLY: Int = ???

    @stub
    // The constant indicating the type for a ResultSet object
    // that is scrollable but generally not sensitive to changes to the data
    // that underlies the ResultSet.
    def TYPE_SCROLL_INSENSITIVE: Int = ???
}
