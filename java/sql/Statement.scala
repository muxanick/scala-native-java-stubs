package java.sql

import java.lang.{AutoCloseable, String}

// The object used for executing a static SQL statement
// and returning the results it produces.
// 
// By default, only one ResultSet object per Statement
// object can be open at the same time. Therefore, if the reading of one
// ResultSet object is interleaved
// with the reading of another, each must have been generated by
// different Statement objects. All execution methods in the
// Statement interface implicitly close a current
// ResultSet object of the statement if an open one exists.
trait Statement extends Wrapper , AutoCloseable {

    @stub
    // Adds the given SQL command to the current list of commands for this
    // Statement object.
    def addBatch(sql: String): Unit = ???

    @stub
    // Cancels this Statement object if both the DBMS and
    // driver support aborting an SQL statement.
    def cancel(): Unit = ???

    @stub
    // Empties this Statement object's current list of
    // SQL commands.
    def clearBatch(): Unit = ???

    @stub
    // Clears all the warnings reported on this Statement
    // object.
    def clearWarnings(): Unit = ???

    @stub
    // Releases this Statement object's database
    // and JDBC resources immediately instead of waiting for
    // this to happen when it is automatically closed.
    def close(): Unit = ???

    @stub
    // Specifies that this Statement will be closed when all its
    // dependent result sets are closed.
    def closeOnCompletion(): Unit = ???

    @stub
    // Executes the given SQL statement, which may return multiple results.
    def execute(sql: String): Boolean = ???

    @stub
    // Executes the given SQL statement, which may return multiple results,
    // and signals the driver that any
    // auto-generated keys should be made available
    // for retrieval.
    def execute(sql: String, autoGeneratedKeys: Int): Boolean = ???

    @stub
    // Executes the given SQL statement, which may return multiple results,
    // and signals the driver that the
    // auto-generated keys indicated in the given array should be made available
    // for retrieval.
    def execute(sql: String, columnIndexes: Array[Int]): Boolean = ???

    @stub
    // Executes the given SQL statement, which may return multiple results,
    // and signals the driver that the
    // auto-generated keys indicated in the given array should be made available
    // for retrieval.
    def execute(sql: String, columnNames: Array[String]): Boolean = ???

    @stub
    // Submits a batch of commands to the database for execution and
    // if all commands execute successfully, returns an array of update counts.
    def executeBatch(): Array[Int] = ???

    @stub
    // Submits a batch of commands to the database for execution and
    // if all commands execute successfully, returns an array of update counts.
    def Array[Long]: default = ???

    @stub
    // Executes the given SQL statement, which may be an INSERT,
    // UPDATE, or DELETE statement or an
    // SQL statement that returns nothing, such as an SQL DDL statement.
    def Long: default = ???

    @stub
    // Executes the given SQL statement and signals the driver with the
    // given flag about whether the
    // auto-generated keys produced by this Statement object
    // should be made available for retrieval.
    def Long: default = ???

    @stub
    // Executes the given SQL statement and signals the driver that the
    // auto-generated keys indicated in the given array should be made available
    // for retrieval.
    def Long: default = ???

    @stub
    // Executes the given SQL statement and signals the driver that the
    // auto-generated keys indicated in the given array should be made available
    // for retrieval.
    def Long: default = ???

    @stub
    // Executes the given SQL statement, which returns a single
    // ResultSet object.
    def executeQuery(sql: String): ResultSet = ???

    @stub
    // Executes the given SQL statement, which may be an INSERT,
    // UPDATE, or DELETE statement or an
    // SQL statement that returns nothing, such as an SQL DDL statement.
    def executeUpdate(sql: String): Int = ???

    @stub
    // Executes the given SQL statement and signals the driver with the
    // given flag about whether the
    // auto-generated keys produced by this Statement object
    // should be made available for retrieval.
    def executeUpdate(sql: String, autoGeneratedKeys: Int): Int = ???

    @stub
    // Executes the given SQL statement and signals the driver that the
    // auto-generated keys indicated in the given array should be made available
    // for retrieval.
    def executeUpdate(sql: String, columnIndexes: Array[Int]): Int = ???

    @stub
    // Executes the given SQL statement and signals the driver that the
    // auto-generated keys indicated in the given array should be made available
    // for retrieval.
    def executeUpdate(sql: String, columnNames: Array[String]): Int = ???

    @stub
    // Retrieves the Connection object
    // that produced this Statement object.
    def getConnection(): Connection = ???

    @stub
    // Retrieves the direction for fetching rows from
    // database tables that is the default for result sets
    // generated from this Statement object.
    def getFetchDirection(): Int = ???

    @stub
    // Retrieves the number of result set rows that is the default
    // fetch size for ResultSet objects
    // generated from this Statement object.
    def getFetchSize(): Int = ???

    @stub
    // Retrieves any auto-generated keys created as a result of executing this
    // Statement object.
    def getGeneratedKeys(): ResultSet = ???

    @stub
    // Retrieves the maximum number of rows that a
    // ResultSet object produced by this
    // Statement object can contain.
    def Long: default = ???

    @stub
    // Retrieves the current result as an update count; if the result
    // is a ResultSet object or there are no more results, -1
    //  is returned.
    def Long: default = ???

    @stub
    // Retrieves the maximum number of bytes that can be
    // returned for character and binary column values in a ResultSet
    // object produced by this Statement object.
    def getMaxFieldSize(): Int = ???

    @stub
    // Retrieves the maximum number of rows that a
    // ResultSet object produced by this
    // Statement object can contain.
    def getMaxRows(): Int = ???

    @stub
    // Moves to this Statement object's next result, returns
    // true if it is a ResultSet object, and
    // implicitly closes any current ResultSet
    // object(s) obtained with the method getResultSet.
    def getMoreResults(): Boolean = ???

    @stub
    // Moves to this Statement object's next result, deals with
    // any current ResultSet object(s) according  to the instructions
    // specified by the given flag, and returns
    // true if the next result is a ResultSet object.
    def getMoreResults(current: Int): Boolean = ???

    @stub
    // Retrieves the number of seconds the driver will
    // wait for a Statement object to execute.
    def getQueryTimeout(): Int = ???

    @stub
    // Retrieves the current result as a ResultSet object.
    def getResultSet(): ResultSet = ???

    @stub
    // Retrieves the result set concurrency for ResultSet objects
    // generated by this Statement object.
    def getResultSetConcurrency(): Int = ???

    @stub
    // Retrieves the result set holdability for ResultSet objects
    // generated by this Statement object.
    def getResultSetHoldability(): Int = ???

    @stub
    // Retrieves the result set type for ResultSet objects
    // generated by this Statement object.
    def getResultSetType(): Int = ???

    @stub
    // Retrieves the current result as an update count;
    //  if the result is a ResultSet object or there are no more results, -1
    //  is returned.
    def getUpdateCount(): Int = ???

    @stub
    // Retrieves the first warning reported by calls on this Statement object.
    def getWarnings(): SQLWarning = ???

    @stub
    // Retrieves whether this Statement object has been closed.
    def isClosed(): Boolean = ???

    @stub
    // Returns a value indicating whether this Statement will be
    // closed when all its dependent result sets are closed.
    def isCloseOnCompletion(): Boolean = ???

    @stub
    // Returns a  value indicating whether the Statement
    // is poolable or not.
    def isPoolable(): Boolean = ???

    @stub
    // Sets the SQL cursor name to the given String, which
    // will be used by subsequent Statement object
    // execute methods.
    def setCursorName(name: String): Unit = ???

    @stub
    // Sets escape processing on or off.
    def setEscapeProcessing(enable: Boolean): Unit = ???

    @stub
    // Gives the driver a hint as to the direction in which
    // rows will be processed in ResultSet
    // objects created using this Statement object.
    def setFetchDirection(direction: Int): Unit = ???

    @stub
    // Gives the JDBC driver a hint as to the number of rows that should
    // be fetched from the database when more rows are needed for
    // ResultSet objects generated by this Statement.
    def setFetchSize(rows: Int): Unit = ???

    @stub
    // Sets the limit for the maximum number of rows that any
    // ResultSet object  generated by this Statement
    // object can contain to the given number.
    def Unit: default = ???

    @stub
    // Sets the limit for the maximum number of bytes that can be returned for
    // character and binary column values in a ResultSet
    // object produced by this Statement object.
    def setMaxFieldSize(max: Int): Unit = ???

    @stub
    // Sets the limit for the maximum number of rows that any
    // ResultSet object  generated by this Statement
    // object can contain to the given number.
    def setMaxRows(max: Int): Unit = ???

    @stub
    // Requests that a Statement be pooled or not pooled.
    def setPoolable(poolable: Boolean): Unit = ???
}

object Statement {
    @stub
    // The constant indicating that all ResultSet objects that
    // have previously been kept open should be closed when calling
    // getMoreResults.
    def CLOSE_ALL_RESULTS: Int = ???

    @stub
    // The constant indicating that the current ResultSet object
    // should be closed when calling getMoreResults.
    def CLOSE_CURRENT_RESULT: Int = ???

    @stub
    // The constant indicating that an error occurred while executing a
    // batch statement.
    def EXECUTE_FAILED: Int = ???

    @stub
    // The constant indicating that the current ResultSet object
    // should not be closed when calling getMoreResults.
    def KEEP_CURRENT_RESULT: Int = ???

    @stub
    // The constant indicating that generated keys should not be made
    // available for retrieval.
    def NO_GENERATED_KEYS: Int = ???

    @stub
    // The constant indicating that generated keys should be made
    // available for retrieval.
    def RETURN_GENERATED_KEYS: Int = ???
}
