package java.awt

import java.awt.event.{ActionEvent, ActionListener}
import java.lang.{Class, Object, String}
import java.util.EventListener
import javax.accessibility.{Accessible, AccessibleContext}

// All items in a menu must belong to the class
// MenuItem, or one of its subclasses.
// 
// The default MenuItem object embodies
// a simple labeled menu item.
// 
// This picture of a menu bar shows five menu items:
// 
// 
// The first two items are simple menu items, labeled
// "Basic" and "Simple".
// Following these two items is a separator, which is itself
// a menu item, created with the label "-".
// Next is an instance of CheckboxMenuItem
// labeled "Check". The final menu item is a
// submenu labeled "More Examples",
// and this submenu is an instance of Menu.
// 
// When a menu item is selected, AWT sends an action event to
// the menu item. Since the event is an
// instance of ActionEvent, the processEvent
// method examines the event and passes it along to
// processActionEvent. The latter method redirects the
// event to any ActionListener objects that have
// registered an interest in action events generated by this
// menu item.
// 
// Note that the subclass Menu overrides this behavior and
// does not send any event to the frame until one of its subitems is
// selected.
class MenuItem extends MenuComponent with Accessible {

    @stub
    // Constructs a new MenuItem with an empty label and no keyboard
    // shortcut.
    def this() = ???

    @stub
    // Constructs a new MenuItem with the specified label
    // and no keyboard shortcut.
    def this(label: String) = ???

    @stub
    // Adds the specified action listener to receive action events
    // from this menu item.
    def addActionListener(l: ActionListener): Unit = ???

    @stub
    // Creates the menu item's peer.
    def addNotify(): Unit = ???

    @stub
    // Delete any MenuShortcut object associated
    // with this menu item.
    def deleteShortcut(): Unit = ???

    @stub
    // Deprecated. 
    //As of JDK version 1.1,
    // replaced by setEnabled(boolean).
    //
    def disable(): Unit = ???

    @stub
    // Disables event delivery to this menu item for events
    // defined by the specified event mask parameter.
    protected def disableEvents(eventsToDisable: Long): Unit = ???

    @stub
    // Deprecated. 
    //As of JDK version 1.1,
    // replaced by setEnabled(boolean).
    //
    def enable(): Unit = ???

    @stub
    // Deprecated. 
    //As of JDK version 1.1,
    // replaced by setEnabled(boolean).
    //
    def enable(b: Boolean): Unit = ???

    @stub
    // Enables event delivery to this menu item for events
    // to be defined by the specified event mask parameter
    protected def enableEvents(eventsToEnable: Long): Unit = ???

    @stub
    // Gets the AccessibleContext associated with this MenuItem.
    def getAccessibleContext(): AccessibleContext = ???

    @stub
    // Gets the command name of the action event that is fired
    // by this menu item.
    def getActionCommand(): String = ???

    @stub
    // Returns an array of all the action listeners
    // registered on this menu item.
    def getActionListeners(): Array[ActionListener] = ???

    @stub
    // Gets the label for this menu item.
    def getLabel(): String = ???

    @stub
    // Returns an array of all the objects currently registered
    // as FooListeners
    // upon this MenuItem.
    def Array[T]: [T <: EventListener] = ???

    @stub
    // Get the MenuShortcut object associated with this
    // menu item,
    def getShortcut(): MenuShortcut = ???

    @stub
    // Checks whether this menu item is enabled.
    def isEnabled(): Boolean = ???

    @stub
    // Returns a string representing the state of this MenuItem.
    def paramString(): String = ???

    @stub
    // Processes action events occurring on this menu item,
    // by dispatching them to any registered
    // ActionListener objects.
    protected def processActionEvent(e: ActionEvent): Unit = ???

    @stub
    // Processes events on this menu item.
    protected def processEvent(e: AWTEvent): Unit = ???

    @stub
    // Removes the specified action listener so it no longer receives
    // action events from this menu item.
    def removeActionListener(l: ActionListener): Unit = ???

    @stub
    // Sets the command name of the action event that is fired
    // by this menu item.
    def setActionCommand(command: String): Unit = ???

    @stub
    // Sets whether or not this menu item can be chosen.
    def setEnabled(b: Boolean): Unit = ???

    @stub
    // Sets the label for this menu item to the specified label.
    def setLabel(label: String): Unit = ???
}
