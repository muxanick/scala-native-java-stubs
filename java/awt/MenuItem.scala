package java.awt

import java.awt.event.{ActionEvent, ActionListener}
import java.lang.{Class, Number, Object, String}
import java.util.EventListener
import javax.accessibility.{Accessible, AccessibleAction, AccessibleContext, AccessibleRole, AccessibleValue}
import scala.scalanative.annotation.stub

/** All items in a menu must belong to the class
 *  MenuItem, or one of its subclasses.
 *  
 *  The default MenuItem object embodies
 *  a simple labeled menu item.
 *  
 *  This picture of a menu bar shows five menu items:
 *  
 *  
 *  The first two items are simple menu items, labeled
 *  "Basic" and "Simple".
 *  Following these two items is a separator, which is itself
 *  a menu item, created with the label "-".
 *  Next is an instance of CheckboxMenuItem
 *  labeled "Check". The final menu item is a
 *  submenu labeled "More Examples",
 *  and this submenu is an instance of Menu.
 *  
 *  When a menu item is selected, AWT sends an action event to
 *  the menu item. Since the event is an
 *  instance of ActionEvent, the processEvent
 *  method examines the event and passes it along to
 *  processActionEvent. The latter method redirects the
 *  event to any ActionListener objects that have
 *  registered an interest in action events generated by this
 *  menu item.
 *  
 *  Note that the subclass Menu overrides this behavior and
 *  does not send any event to the frame until one of its subitems is
 *  selected.
 */
class MenuItem extends MenuComponent with Accessible {

    /** Constructs a new MenuItem with an empty label and no keyboard
     *  shortcut.
     */
    @stub
    def this() = ???

    /** Constructs a new MenuItem with the specified label
     *  and no keyboard shortcut.
     */
    @stub
    def this(label: String) = ???

    /** Create a menu item with an associated keyboard shortcut. */
    @stub
    def this(label: String, s: MenuShortcut) = ???

    /** Inner class of MenuItem used to provide default support for
     *  accessibility.  This class is not meant to be used directly by
     *  application developers, but is instead meant only to be
     *  subclassed by menu component developers.
     *  
     *  This class implements accessibility support for the
     *  MenuItem class.  It provides an implementation of the
     *  Java Accessibility API appropriate to menu item user-interface elements.
     */
    protected class AccessibleAWTMenuItem extends MenuComponent.AccessibleAWTMenuComponent with AccessibleAction with AccessibleValue {

        /**  */
        @stub
        protected def this() = ???

        /** Perform the specified Action on the object */
        @stub
        def doAccessibleAction(i: Int): Boolean = ???

        /** Get the AccessibleAction associated with this object. */
        @stub
        def getAccessibleAction(): AccessibleAction = ???

        /** Returns the number of Actions available in this object. */
        @stub
        def getAccessibleActionCount(): Int = ???

        /** Return a description of the specified action of the object. */
        @stub
        def getAccessibleActionDescription(i: Int): String = ???

        /** Get the accessible name of this object. */
        @stub
        def getAccessibleName(): String = ???

        /** Get the role of this object. */
        @stub
        def getAccessibleRole(): AccessibleRole = ???

        /** Get the AccessibleValue associated with this object. */
        @stub
        def getAccessibleValue(): AccessibleValue = ???

        /** Get the value of this object as a Number. */
        @stub
        def getCurrentAccessibleValue(): Number = ???

        /** Get the maximum value of this object as a Number. */
        @stub
        def getMaximumAccessibleValue(): Number = ???

        /** Get the minimum value of this object as a Number. */
        @stub
        def getMinimumAccessibleValue(): Number = ???

        /** Set the value of this object as a Number. */
        @stub
        def setCurrentAccessibleValue(n: Number): Boolean = ???
    }


    /** Adds the specified action listener to receive action events
     *  from this menu item.
     */
    @stub
    def addActionListener(l: ActionListener): Unit = ???

    /** Creates the menu item's peer. */
    @stub
    def addNotify(): Unit = ???

    /** Delete any MenuShortcut object associated
     *  with this menu item.
     */
    @stub
    def deleteShortcut(): Unit = ???

    /** Deprecated. 
     * As of JDK version 1.1,
     *  replaced by setEnabled(boolean).
     * 
     */
    @stub
    def disable(): Unit = ???

    /** Disables event delivery to this menu item for events
     *  defined by the specified event mask parameter.
     */
    @stub
    protected def disableEvents(eventsToDisable: Long): Unit = ???

    /** Deprecated. 
     * As of JDK version 1.1,
     *  replaced by setEnabled(boolean).
     * 
     */
    @stub
    def enable(): Unit = ???

    /** Deprecated. 
     * As of JDK version 1.1,
     *  replaced by setEnabled(boolean).
     * 
     */
    @stub
    def enable(b: Boolean): Unit = ???

    /** Enables event delivery to this menu item for events
     *  to be defined by the specified event mask parameter
     */
    @stub
    protected def enableEvents(eventsToEnable: Long): Unit = ???

    /** Gets the AccessibleContext associated with this MenuItem. */
    @stub
    def getAccessibleContext(): AccessibleContext = ???

    /** Gets the command name of the action event that is fired
     *  by this menu item.
     */
    @stub
    def getActionCommand(): String = ???

    /** Returns an array of all the action listeners
     *  registered on this menu item.
     */
    @stub
    def getActionListeners(): Array[ActionListener] = ???

    /** Gets the label for this menu item. */
    @stub
    def getLabel(): String = ???

    /** Returns an array of all the objects currently registered
     *  as FooListeners
     *  upon this MenuItem.
     */
    @stub
    def getListeners[T <: EventListener](listenerType: Class[T]): Array[T] = ???

    /** Get the MenuShortcut object associated with this
     *  menu item,
     */
    @stub
    def getShortcut(): MenuShortcut = ???

    /** Checks whether this menu item is enabled. */
    @stub
    def isEnabled(): Boolean = ???

    /** Returns a string representing the state of this MenuItem. */
    @stub
    def paramString(): String = ???

    /** Processes action events occurring on this menu item,
     *  by dispatching them to any registered
     *  ActionListener objects.
     */
    @stub
    protected def processActionEvent(e: ActionEvent): Unit = ???

    /** Processes events on this menu item. */
    @stub
    protected def processEvent(e: AWTEvent): Unit = ???

    /** Removes the specified action listener so it no longer receives
     *  action events from this menu item.
     */
    @stub
    def removeActionListener(l: ActionListener): Unit = ???

    /** Sets the command name of the action event that is fired
     *  by this menu item.
     */
    @stub
    def setActionCommand(command: String): Unit = ???

    /** Sets whether or not this menu item can be chosen. */
    @stub
    def setEnabled(b: Boolean): Unit = ???

    /** Sets the label for this menu item to the specified label. */
    @stub
    def setLabel(label: String): Unit = ???

    /** Set the MenuShortcut object associated with this
     *  menu item.
     */
    @stub
    def setShortcut(s: MenuShortcut): Unit = ???
}
