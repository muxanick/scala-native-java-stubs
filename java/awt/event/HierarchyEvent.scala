package java.awt.event

import java.awt.{AWTEvent, Component, Container}
import java.lang.{Object, String}
import java.util.EventObject
import scala.scalanative.annotation.stub

/** An event which indicates a change to the Component
 *  hierarchy to which Component belongs.
 *  
 *  Hierarchy Change Events (HierarchyListener)
 *      
 *       addition of an ancestor
 *       removal of an ancestor
 *       hierarchy made displayable
 *       hierarchy made undisplayable
 *       hierarchy shown on the screen (both visible and displayable)
 *       hierarchy hidden on the screen (either invisible or undisplayable)
 *      
 *  Ancestor Reshape Events (HierarchyBoundsListener)
 *      
 *       an ancestor was resized
 *       an ancestor was moved
 *      
 *  
 *  
 *  Hierarchy events are provided for notification purposes ONLY.
 *  The AWT will automatically handle changes to the hierarchy internally so
 *  that GUI layout and displayability works properly regardless of whether a
 *  program is receiving these events or not.
 *  
 *  This event is generated by a Container object (such as a Panel) when the
 *  Container is added, removed, moved, or resized, and passed down the
 *  hierarchy. It is also generated by a Component object when that object's
 *  addNotify, removeNotify, show, or
 *  hide method is called. The ANCESTOR_MOVED and
 *  ANCESTOR_RESIZED
 *  events are dispatched to every HierarchyBoundsListener or
 *  HierarchyBoundsAdapter object which registered to receive
 *  such events using the Component's addHierarchyBoundsListener
 *  method. (HierarchyBoundsAdapter objects implement the 
 *  HierarchyBoundsListener interface.) The HIERARCHY_CHANGED events are
 *  dispatched to every HierarchyListener object which registered
 *  to receive such events using the Component's addHierarchyListener
 *   method. Each such listener object gets this HierarchyEvent
 *   when the event occurs.
 *  
 *  An unspecified behavior will be caused if the id parameter
 *  of any particular HierarchyEvent instance is not
 *  in the range from HIERARCHY_FIRST to HIERARCHY_LAST.
 *  
 *  The changeFlags parameter of any HierarchyEvent instance takes one of the following
 *  values:
 *  
 *   HierarchyEvent.PARENT_CHANGED
 *   HierarchyEvent.DISPLAYABILITY_CHANGED
 *   HierarchyEvent.SHOWING_CHANGED
 *  
 *  Assigning the value different from listed above will cause unspecified behavior.
 */
class HierarchyEvent extends AWTEvent {

    /** Constructs an HierarchyEvent object to identify a
     *  change in the Component hierarchy.
     */
    @stub
    def this(source: Component, id: Int, changed: Component, changedParent: Container) = ???

    /** Constructs an HierarchyEvent object to identify
     *  a change in the Component hierarchy.
     */
    @stub
    def this(source: Component, id: Int, changed: Component, changedParent: Container, changeFlags: Long) = ???

    /** Returns the Component at the top of the hierarchy which was
     *  changed.
     */
    @stub
    def getChanged(): Component = ???

    /** Returns the parent of the Component returned by 
     *  getChanged().
     */
    @stub
    def getChangedParent(): Container = ???

    /** Returns a bitmask which indicates the type(s) of
     *  HIERARCHY_CHANGED events represented in this event object.
     */
    @stub
    def getChangeFlags(): Long = ???

    /** Returns the originator of the event. */
    @stub
    def getComponent(): Component = ???

    /** Returns a parameter string identifying this event. */
    @stub
    def paramString(): String = ???
}

object HierarchyEvent {
    /** The event id indicating an ancestor-Container was moved. */
    @stub
    val ANCESTOR_MOVED: Int = ???

    /** The event id indicating an ancestor-Container was resized. */
    @stub
    val ANCESTOR_RESIZED: Int = ???

    /** A change flag indicates that the HIERARCHY_CHANGED event
     *  was generated due to the changing of the hierarchy displayability.
     */
    @stub
    val DISPLAYABILITY_CHANGED: Int = ???

    /** The event id indicating that modification was made to the
     *  entire hierarchy tree.
     */
    @stub
    val HIERARCHY_CHANGED: Int = ???

    /** Marks the first integer id for the range of hierarchy event ids. */
    @stub
    val HIERARCHY_FIRST: Int = ???

    /** Marks the last integer id for the range of ancestor event ids. */
    @stub
    val HIERARCHY_LAST: Int = ???

    /** A change flag indicates that the HIERARCHY_CHANGED event
     *  was generated by a reparenting operation.
     */
    @stub
    val PARENT_CHANGED: Int = ???

    /** A change flag indicates that the HIERARCHY_CHANGED event
     *  was generated due to the changing of the hierarchy showing state.
     */
    @stub
    val SHOWING_CHANGED: Int = ???
}
