package java.awt.event

import java.awt.AWTEvent
import java.lang.{Object, String}
import java.util.EventObject

// A semantic event which indicates that a component-defined action occurred.
// This high-level event is generated by a component (such as a
// Button) when
// the component-specific action occurs (such as being pressed).
// The event is passed to every ActionListener object
// that registered to receive such events using the component's
// addActionListener method.
// 
// Note: To invoke an ActionEvent on a
// Button using the keyboard, use the Space bar.
// 
// The object that implements the ActionListener interface
// gets this ActionEvent when the event occurs. The listener
// is therefore spared the details of processing individual mouse movements
// and mouse clicks, and can instead process a "meaningful" (semantic)
// event like "button pressed".
// 
// An unspecified behavior will be caused if the id parameter
// of any particular ActionEvent instance is not
// in the range from ACTION_FIRST to ACTION_LAST.
class ActionEvent extends AWTEvent {

    @stub
    // Constructs an ActionEvent object.
    def this(source: Object, id: Int, command: String) = ???

    @stub
    // Constructs an ActionEvent object with modifier keys.
    def this(source: Object, id: Int, command: String, modifiers: Int) = ???

    @stub
    // Returns the command string associated with this action.
    def getActionCommand(): String = ???

    @stub
    // Returns the modifier keys held down during this action event.
    def getModifiers(): Int = ???

    @stub
    // Returns the timestamp of when this event occurred.
    def getWhen(): Long = ???
}

object ActionEvent {
    @stub
    // The first number in the range of ids used for action events.
    def ACTION_FIRST: Int = ???

    @stub
    // The last number in the range of ids used for action events.
    def ACTION_LAST: Int = ???

    @stub
    // This event id indicates that a meaningful action occurred.
    def ACTION_PERFORMED: Int = ???

    @stub
    // The alt modifier.
    def ALT_MASK: Int = ???

    @stub
    // The control modifier.
    def CTRL_MASK: Int = ???

    @stub
    // The meta modifier.
    def META_MASK: Int = ???
}
