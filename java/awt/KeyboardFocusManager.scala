package java.awt

import java.awt.event.KeyEvent
import java.beans.{PropertyChangeListener, VetoableChangeListener}
import java.lang.{Object, String}
import java.util.{List, Set}

/** The KeyboardFocusManager is responsible for managing the active and focused
 *  Windows, and the current focus owner. The focus owner is defined as the
 *  Component in an application that will typically receive all KeyEvents
 *  generated by the user. The focused Window is the Window that is, or
 *  contains, the focus owner. Only a Frame or a Dialog can be the active
 *  Window. The native windowing system may denote the active Window or its
 *  children with special decorations, such as a highlighted title bar. The
 *  active Window is always either the focused Window, or the first Frame or
 *  Dialog that is an owner of the focused Window.
 *  
 *  The KeyboardFocusManager is both a centralized location for client code to
 *  query for the focus owner and initiate focus changes, and an event
 *  dispatcher for all FocusEvents, WindowEvents related to focus, and
 *  KeyEvents.
 *  
 *  Some browsers partition applets in different code bases into separate
 *  contexts, and establish walls between these contexts. In such a scenario,
 *  there will be one KeyboardFocusManager per context. Other browsers place all
 *  applets into the same context, implying that there will be only a single,
 *  global KeyboardFocusManager for all applets. This behavior is
 *  implementation-dependent. Consult your browser's documentation for more
 *  information. No matter how many contexts there may be, however, there can
 *  never be more than one focus owner, focused Window, or active Window, per
 *  ClassLoader.
 *  
 *  Please see
 *  
 *  How to Use the Focus Subsystem,
 *  a section in The Java Tutorial, and the
 *  Focus Specification
 *  for more information.
 */
abstract class KeyboardFocusManager extends Object with KeyEventDispatcher with KeyEventPostProcessor {

    /** Adds a KeyEventDispatcher to this KeyboardFocusManager's dispatcher
     *  chain.
     */
    def addKeyEventDispatcher(dispatcher: KeyEventDispatcher): Unit

    /** Adds a KeyEventPostProcessor to this KeyboardFocusManager's post-
     *  processor chain.
     */
    def addKeyEventPostProcessor(processor: KeyEventPostProcessor): Unit

    /** Adds a PropertyChangeListener to the listener list. */
    def addPropertyChangeListener(listener: PropertyChangeListener): Unit

    /** Adds a PropertyChangeListener to the listener list for a specific
     *  property.
     */
    def addPropertyChangeListener(propertyName: String, listener: PropertyChangeListener): Unit

    /** Adds a VetoableChangeListener to the listener list for a specific
     *  property.
     */
    def addVetoableChangeListener(propertyName: String, listener: VetoableChangeListener): Unit

    /** Adds a VetoableChangeListener to the listener list. */
    def addVetoableChangeListener(listener: VetoableChangeListener): Unit

    /** Clears the focus owner at both the Java and native levels if the
     *  focus owner exists and resides in the same context as the calling thread,
     *  otherwise the method returns silently.
     */
    def clearFocusOwner(): Unit

    /** Clears the global focus owner at both the Java and native levels. */
    def clearGlobalFocusOwner(): Unit

    /** Called by the AWT to notify the KeyboardFocusManager that it should
     *  cancel delayed dispatching of KeyEvents.
     */
    protected def dequeueKeyEvents(after: Long, untilFocused: Component): Unit

    /** Called by the AWT to notify the KeyboardFocusManager that it should
     *  cancel delayed dispatching of KeyEvents.
     */
    protected def discardKeyEvents(comp: Component): Unit

    /** This method is called by the AWT event dispatcher requesting that the
     *  current KeyboardFocusManager dispatch the specified event on its behalf.
     */
    def dispatchEvent(e: AWTEvent): Boolean

    /** Typically this method will be called by dispatchEvent if no
     *  other KeyEventDispatcher in the dispatcher chain dispatched the
     *  KeyEvent, or if no other KeyEventDispatchers are registered.
     */
    def dispatchKeyEvent(e: KeyEvent): Boolean

    /** Moves the focus down one focus traversal cycle from the current focus
     *  owner, if and only if the current focus owner is a Container that is a
     *  focus cycle root.
     */
    def downFocusCycle(): Unit

    /** Moves the focus down one focus traversal cycle. */
    def downFocusCycle(aContainer: Container): Unit

    /** Called by the AWT to notify the KeyboardFocusManager that it should
     *  delay dispatching of KeyEvents until the specified Component becomes
     *  the focus owner.
     */
    protected def enqueueKeyEvents(after: Long, untilFocused: Component): Unit

    /** Fires a PropertyChangeEvent in response to a change in a bound property. */
    protected def firePropertyChange(propertyName: String, oldValue: Object, newValue: Object): Unit

    /** Fires a PropertyChangeEvent in response to a change in a vetoable
     *  property.
     */
    protected def fireVetoableChange(propertyName: String, oldValue: Object, newValue: Object): Unit

    /** Focuses the Component after the current focus owner. */
    def focusNextComponent(): Unit

    /** Focuses the Component after aComponent, typically based on a
     *  FocusTraversalPolicy.
     */
    def focusNextComponent(aComponent: Component): Unit

    /** Focuses the Component before the current focus owner. */
    def focusPreviousComponent(): Unit

    /** Focuses the Component before aComponent, typically based on a
     *  FocusTraversalPolicy.
     */
    def focusPreviousComponent(aComponent: Component): Unit

    /** Returns the active Window, if the active Window is in the same context
     *  as the calling thread.
     */
    def getActiveWindow(): Window

    /** Returns the current focus cycle root, if the current focus cycle root is
     *  in the same context as the calling thread.
     */
    def getCurrentFocusCycleRoot(): Container

    /** Returns a Set of default focus traversal keys for a given traversal
     *  operation.
     */
    def getDefaultFocusTraversalKeys(id: Int): Set[AWTKeyStroke]

    /** Returns the default FocusTraversalPolicy. */
    def getDefaultFocusTraversalPolicy(): FocusTraversalPolicy

    /** Returns the focused Window, if the focused Window is in the same context
     *  as the calling thread.
     */
    def getFocusedWindow(): Window

    /** Returns the focus owner, if the focus owner is in the same context as
     *  the calling thread.
     */
    def getFocusOwner(): Component

    /** Returns the active Window, even if the calling thread is in a different
     *  context than the active Window.
     */
    protected def getGlobalActiveWindow(): Window

    /** Returns the current focus cycle root, even if the calling thread is in a
     *  different context than the current focus cycle root.
     */
    protected def getGlobalCurrentFocusCycleRoot(): Container

    /** Returns the focused Window, even if the calling thread is in a different
     *  context than the focused Window.
     */
    protected def getGlobalFocusedWindow(): Window

    /** Returns the focus owner, even if the calling thread is in a different
     *  context than the focus owner.
     */
    protected def getGlobalFocusOwner(): Component

    /** Returns the permanent focus owner, even if the calling thread is in a
     *  different context than the permanent focus owner.
     */
    protected def getGlobalPermanentFocusOwner(): Component

    /** Returns this KeyboardFocusManager's KeyEventDispatcher chain as a List. */
    protected def getKeyEventDispatchers(): List[KeyEventDispatcher]

    /** Returns this KeyboardFocusManager's KeyEventPostProcessor chain as a
     *  List.
     */
    protected def getKeyEventPostProcessors(): List[KeyEventPostProcessor]

    /** Returns the permanent focus owner, if the permanent focus owner is in
     *  the same context as the calling thread.
     */
    def getPermanentFocusOwner(): Component

    /** Returns an array of all the property change listeners
     *  registered on this keyboard focus manager.
     */
    def getPropertyChangeListeners(): Array[PropertyChangeListener]

    /** Returns an array of all the PropertyChangeListeners
     *  associated with the named property.
     */
    def getPropertyChangeListeners(propertyName: String): Array[PropertyChangeListener]

    /** Returns an array of all the vetoable change listeners
     *  registered on this keyboard focus manager.
     */
    def getVetoableChangeListeners(): Array[VetoableChangeListener]

    /** Returns an array of all the VetoableChangeListeners
     *  associated with the named property.
     */
    def getVetoableChangeListeners(propertyName: String): Array[VetoableChangeListener]

    /** This method will be called by dispatchKeyEvent. */
    def postProcessKeyEvent(e: KeyEvent): Boolean

    /** This method initiates a focus traversal operation if and only if the
     *  KeyEvent represents a focus traversal key for the specified
     *  focusedComponent.
     */
    def processKeyEvent(focusedComponent: Component, e: KeyEvent): Unit

    /** Redispatches an AWTEvent in such a way that the AWT event dispatcher
     *  will not recursively request that the KeyboardFocusManager, or any
     *  installed KeyEventDispatchers, dispatch the event again.
     */
    def redispatchEvent(target: Component, e: AWTEvent): Unit

    /** Removes a KeyEventDispatcher which was previously added to this
     *  KeyboardFocusManager's dispatcher chain.
     */
    def removeKeyEventDispatcher(dispatcher: KeyEventDispatcher): Unit

    /** Removes a previously added KeyEventPostProcessor from this
     *  KeyboardFocusManager's post-processor chain.
     */
    def removeKeyEventPostProcessor(processor: KeyEventPostProcessor): Unit

    /** Removes a PropertyChangeListener from the listener list. */
    def removePropertyChangeListener(listener: PropertyChangeListener): Unit

    /** Removes a PropertyChangeListener from the listener list for a specific
     *  property.
     */
    def removePropertyChangeListener(propertyName: String, listener: PropertyChangeListener): Unit

    /** Removes a VetoableChangeListener from the listener list for a specific
     *  property.
     */
    def removeVetoableChangeListener(propertyName: String, listener: VetoableChangeListener): Unit

    /** Removes a VetoableChangeListener from the listener list. */
    def removeVetoableChangeListener(listener: VetoableChangeListener): Unit

    /** Sets the default focus traversal keys for a given traversal operation. */
    def setDefaultFocusTraversalKeys(id: Int, keystrokes: Set[_ <: AWTKeyStroke]): Unit

    /** Sets the default FocusTraversalPolicy. */
    def setDefaultFocusTraversalPolicy(defaultPolicy: FocusTraversalPolicy): Unit

    /** Sets the active Window. */
    protected def setGlobalActiveWindow(activeWindow: Window): Unit

    /** Sets the current focus cycle root. */
    def setGlobalCurrentFocusCycleRoot(newFocusCycleRoot: Container): Unit

    /** Sets the focused Window. */
    protected def setGlobalFocusedWindow(focusedWindow: Window): Unit

    /** Sets the focus owner. */
    protected def setGlobalFocusOwner(focusOwner: Component): Unit

    /** Sets the permanent focus owner. */
    protected def setGlobalPermanentFocusOwner(permanentFocusOwner: Component): Unit

    /** Moves the focus up one focus traversal cycle from the current focus
     *  owner.
     */
    def upFocusCycle(): Unit
}

object KeyboardFocusManager {
    /** The identifier for the Backward focus traversal keys. */
    @stub
    val BACKWARD_TRAVERSAL_KEYS: Int = ???

    /** The identifier for the Down Cycle focus traversal keys. */
    @stub
    val DOWN_CYCLE_TRAVERSAL_KEYS: Int = ???

    /** The identifier for the Forward focus traversal keys. */
    @stub
    val FORWARD_TRAVERSAL_KEYS: Int = ???

    /** Returns the current KeyboardFocusManager instance for the calling
     *  thread's context.
     */
    @stub
    def getCurrentKeyboardFocusManager(): KeyboardFocusManager = ???

    /** Sets the current KeyboardFocusManager instance for the calling thread's
     *  context.
     */
    @stub
    def setCurrentKeyboardFocusManager(newManager: KeyboardFocusManager): Unit = ???
}
