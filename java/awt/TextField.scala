package java.awt

import java.awt.event.{ActionEvent, ActionListener}
import java.lang.{Class, Object, String}
import java.util.EventListener
import javax.accessibility.AccessibleContext
import scala.scalanative.annotation.stub

/** A TextField object is a text component
 *  that allows for the editing of a single line of text.
 *  
 *  For example, the following image depicts a frame with four
 *  text fields of varying widths. Two of these text fields
 *  display the predefined text "Hello".
 *  
 *  
 *  
 *  Here is the code that produces these four text fields:
 * 
 *  
 *  TextField tf1, tf2, tf3, tf4;
 *  // a blank text field
 *  tf1 = new TextField();
 *  // blank field of 20 columns
 *  tf2 = new TextField("", 20);
 *  // predefined text displayed
 *  tf3 = new TextField("Hello!");
 *  // predefined text in 30 columns
 *  tf4 = new TextField("Hello", 30);
 *  
 *  
 *  Every time the user types a key in the text field, one or
 *  more key events are sent to the text field.  A KeyEvent
 *  may be one of three types: keyPressed, keyReleased, or keyTyped.
 *  The properties of a key event indicate which of these types
 *  it is, as well as additional information about the event,
 *  such as what modifiers are applied to the key event and the
 *  time at which the event occurred.
 *  
 *  The key event is passed to every KeyListener
 *  or KeyAdapter object which registered to receive such
 *  events using the component's addKeyListener method.
 *  (KeyAdapter objects implement the
 *  KeyListener interface.)
 *  
 *  It is also possible to fire an ActionEvent.
 *  If action events are enabled for the text field, they may
 *  be fired by pressing the Return key.
 *  
 *  The TextField class's processEvent
 *  method examines the action event and passes it along to
 *  processActionEvent. The latter method redirects the
 *  event to any ActionListener objects that have
 *  registered to receive action events generated by this
 *  text field.
 */
class TextField extends TextComponent {

    /** Constructs a new text field. */
    @stub
    def this() = ???

    /** Constructs a new empty text field with the specified number
     *  of columns.
     */
    @stub
    def this(columns: Int) = ???

    /** Constructs a new text field initialized with the specified text. */
    @stub
    def this(text: String) = ???

    /** Constructs a new text field initialized with the specified text
     *  to be displayed, and wide enough to hold the specified
     *  number of columns.
     */
    @stub
    def this(text: String, columns: Int) = ???

    /** This class implements accessibility support for the
     *  TextField class.
     */
    protected type AccessibleAWTTextField = TextField_AccessibleAWTTextField

    /** Adds the specified action listener to receive
     *  action events from this text field.
     */
    @stub
    def addActionListener(l: ActionListener): Unit = ???

    /** Creates the TextField's peer. */
    @stub
    def addNotify(): Unit = ???

    /** Indicates whether or not this text field has a
     *  character set for echoing.
     */
    @stub
    def echoCharIsSet(): Boolean = ???

    /** Gets the AccessibleContext associated with this TextField. */
    @stub
    def getAccessibleContext(): AccessibleContext = ???

    /** Returns an array of all the action listeners
     *  registered on this textfield.
     */
    @stub
    def getActionListeners(): Array[ActionListener] = ???

    /** Gets the number of columns in this text field. */
    @stub
    def getColumns(): Int = ???

    /** Gets the character that is to be used for echoing. */
    @stub
    def getEchoChar(): Char = ???

    /** Returns an array of all the objects currently registered
     *  as FooListeners
     *  upon this TextField.
     */
    @stub
    def getListeners[T <: EventListener](listenerType: Class[T]): Array[T] = ???

    /** Gets the minimum dimensions for this text field. */
    @stub
    def getMinimumSize(): Dimension = ???

    /** Gets the minimum dimensions for a text field with
     *  the specified number of columns.
     */
    @stub
    def getMinimumSize(columns: Int): Dimension = ???

    /** Gets the preferred size of this text field. */
    @stub
    def getPreferredSize(): Dimension = ???

    /** Gets the preferred size of this text field
     *  with the specified number of columns.
     */
    @stub
    def getPreferredSize(columns: Int): Dimension = ???

    /** Deprecated. 
     * As of JDK version 1.1,
     *  replaced by getMinimumSize().
     * 
     */
    @stub
    def minimumSize(): Dimension = ???

    /** Deprecated. 
     * As of JDK version 1.1,
     *  replaced by getMinimumSize(int).
     * 
     */
    @stub
    def minimumSize(columns: Int): Dimension = ???

    /** Returns a string representing the state of this TextField. */
    @stub
    protected def paramString(): String = ???

    /** Deprecated. 
     * As of JDK version 1.1,
     *  replaced by getPreferredSize().
     * 
     */
    @stub
    def preferredSize(): Dimension = ???

    /** Deprecated. 
     * As of JDK version 1.1,
     *  replaced by getPreferredSize(int).
     * 
     */
    @stub
    def preferredSize(columns: Int): Dimension = ???

    /** Processes action events occurring on this text field by
     *  dispatching them to any registered
     *  ActionListener objects.
     */
    @stub
    protected def processActionEvent(e: ActionEvent): Unit = ???

    /** Processes events on this text field. */
    @stub
    protected def processEvent(e: AWTEvent): Unit = ???

    /** Removes the specified action listener so that it no longer
     *  receives action events from this text field.
     */
    @stub
    def removeActionListener(l: ActionListener): Unit = ???

    /** Sets the number of columns in this text field. */
    @stub
    def setColumns(columns: Int): Unit = ???

    /** Sets the echo character for this text field. */
    @stub
    def setEchoChar(c: Char): Unit = ???

    /** Deprecated. 
     * As of JDK version 1.1,
     *  replaced by setEchoChar(char).
     * 
     */
    @stub
    def setEchoCharacter(c: Char): Unit = ???

    /** Sets the text that is presented by this
     *  text component to be the specified text.
     */
    @stub
    def setText(t: String): Unit = ???
}
