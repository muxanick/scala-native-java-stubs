package java.rmi.server

import java.lang.Object
import java.rmi.Remote
import scala.scalanative.annotation.stub

/** Used for exporting a remote object with JRMP and obtaining a stub
 *  that communicates to the remote object. Stubs are either generated
 *  at runtime using dynamic proxy objects, or they are generated statically
 *  at build time, typically using the rmic tool.
 * 
 *  Deprecated: Static Stubs. Support for statically
 *  generated stubs is deprecated. This includes the API in this class that
 *  requires the use of static stubs, as well as the runtime support for
 *  loading static stubs.  Generating stubs dynamically is preferred, using one
 *  of the five non-deprecated ways of exporting objects as listed below. Do
 *  not run rmic to generate static stub classes. It is unnecessary, and
 *  it is also deprecated.
 * 
 *  There are six ways to export remote objects:
 * 
 *  
 * 
 *  Subclassing UnicastRemoteObject and calling the
 *  UnicastRemoteObject() constructor.
 * 
 *  Subclassing UnicastRemoteObject and calling the
 *  UnicastRemoteObject(port) constructor.
 * 
 *  Subclassing UnicastRemoteObject and calling the
 *  UnicastRemoteObject(port, csf, ssf) constructor.
 * 
 *  Calling the
 *  exportObject(Remote) method.
 *  Deprecated.
 * 
 *  Calling the
 *  exportObject(Remote, port) method.
 * 
 *  Calling the
 *  exportObject(Remote, port, csf, ssf) method.
 * 
 *  
 * 
 *  The fourth technique, exportObject(Remote),
 *  always uses statically generated stubs and is deprecated.
 * 
 *  The other five techniques all use the following approach: if the
 *  java.rmi.server.ignoreStubClasses property is true
 *  (case insensitive) or if a static stub cannot be found, stubs are generated
 *  dynamically using Proxy objects. Otherwise,
 *  static stubs are used.
 * 
 *  The default value of the
 *  java.rmi.server.ignoreStubClasses property is false.
 * 
 *  Statically generated stubs are typically pregenerated from the
 *  remote object's class using the rmic tool. A static stub is
 *  loaded and an instance of that stub class is constructed as described
 *  below.
 * 
 *  
 * 
 *  A "root class" is determined as follows: if the remote object's
 *  class directly implements an interface that extends Remote, then
 *  the remote object's class is the root class; otherwise, the root class is
 *  the most derived superclass of the remote object's class that directly
 *  implements an interface that extends Remote.
 * 
 *  The name of the stub class to load is determined by concatenating
 *  the binary name of the root class with the suffix _Stub.
 * 
 *  The stub class is loaded by name using the class loader of the root
 *  class. The stub class must extend RemoteStub and must have a
 *  public constructor that has one parameter of type RemoteRef.
 * 
 *  Finally, an instance of the stub class is constructed with a
 *  RemoteRef.
 * 
 *  If the appropriate stub class could not be found, or if the stub class
 *  could not be loaded, or if a problem occurs creating the stub instance, a
 *  StubNotFoundException is thrown.
 * 
 *  
 * 
 *  Stubs are dynamically generated by constructing an instance of
 *  a Proxy with the following characteristics:
 * 
 *  
 * 
 *  The proxy's class is defined by the class loader of the remote
 *  object's class.
 * 
 *  The proxy implements all the remote interfaces implemented by the
 *  remote object's class.
 * 
 *  The proxy's invocation handler is a RemoteObjectInvocationHandler instance constructed with a
 *  RemoteRef.
 * 
 *  If the proxy could not be created, a StubNotFoundException
 *  will be thrown.
 * 
 *  
 */
class UnicastRemoteObject extends RemoteServer {

    /** Creates and exports a new UnicastRemoteObject object using an
     *  anonymous port.
     */
    @stub
    protected def this() = ???

    /** Creates and exports a new UnicastRemoteObject object using the
     *  particular supplied port.
     */
    @stub
    protected def this(port: Int) = ???

    /** Creates and exports a new UnicastRemoteObject object using the
     *  particular supplied port and socket factories.
     */
    @stub
    protected def this(port: Int, csf: RMIClientSocketFactory, ssf: RMIServerSocketFactory) = ???

    /** Returns a clone of the remote object that is distinct from
     *  the original.
     */
    @stub
    def clone(): Any = ???
}

object UnicastRemoteObject {
    /** Deprecated.Â 
     * This method is deprecated because it supports only static stubs.
     *  Use exportObject(Remote, port) or
     *  exportObject(Remote, port, csf, ssf)
     *  instead.
     * 
     */
    @stub
    def exportObject(obj: Remote): RemoteStub = ???

    /** Exports the remote object to make it available to receive incoming
     *  calls, using the particular supplied port.
     */
    @stub
    def exportObject(obj: Remote, port: Int): Remote = ???

    /** Exports the remote object to make it available to receive incoming
     *  calls, using a transport specified by the given socket factory.
     */
    @stub
    def exportObject(obj: Remote, port: Int, csf: RMIClientSocketFactory, ssf: RMIServerSocketFactory): Remote = ???

    /** Removes the remote object, obj, from the RMI runtime. */
    @stub
    def unexportObject(obj: Remote, force: Boolean): Boolean = ???
}
